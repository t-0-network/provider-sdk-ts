// @generated by protoc-gen-es v2.6.2 with parameter "target=ts,import_extension=js"
// @generated from file tzero/v1/payment_intent/provider/provider.proto (package tzero.v1.payment_intent.provider, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Blockchain, Decimal, Stablecoin } from "../../common/common_pb.js";
import { file_tzero_v1_common_common } from "../../common/common_pb.js";
import type { PaymentMethodType } from "../../common/payment_method_pb.js";
import { file_tzero_v1_common_payment_method } from "../../common/payment_method_pb.js";
import { file_buf_validate_validate } from "../../../../buf/validate/validate_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file tzero/v1/payment_intent/provider/provider.proto.
 */
export const file_tzero_v1_payment_intent_provider_provider: GenFile = /*@__PURE__*/
  fileDesc("Ci90emVyby92MS9wYXltZW50X2ludGVudC9wcm92aWRlci9wcm92aWRlci5wcm90bxIgdHplcm8udjEucGF5bWVudF9pbnRlbnQucHJvdmlkZXIimgEKGkNyZWF0ZVBheW1lbnRJbnRlbnRSZXF1ZXN0EiIKEXBheW1lbnRfaW50ZW50X2lkGAogASgEQge6SAQyAiAAEiYKCGN1cnJlbmN5GBQgASgJQhS6SBFyDzIKXltBLVpdezN9JJgBAxIwCgZhbW91bnQYHiABKAsyGC50emVyby52MS5jb21tb24uRGVjaW1hbEIGukgDyAEBIpQCChtDcmVhdGVQYXltZW50SW50ZW50UmVzcG9uc2USbgoPcGF5bWVudF9tZXRob2RzGBQgAygLMksudHplcm8udjEucGF5bWVudF9pbnRlbnQucHJvdmlkZXIuQ3JlYXRlUGF5bWVudEludGVudFJlc3BvbnNlLlBheW1lbnRNZXRob2RCCLpIBZIBAggBGoQBCg1QYXltZW50TWV0aG9kEi0KC3BheW1lbnRfdXJsGAogASgJQhi6SBVyExABGIAQMgxeaHR0cHM/Oi8vLisSRAoOcGF5bWVudF9tZXRob2QYFCABKA4yIi50emVyby52MS5jb21tb24uUGF5bWVudE1ldGhvZFR5cGVCCLpIBYIBAiAAIoEBChVDb25maXJtUGF5bWVudFJlcXVlc3QSIgoRcGF5bWVudF9pbnRlbnRfaWQYCiABKARCB7pIBDICIAASRAoOcGF5bWVudF9tZXRob2QYFCABKA4yIi50emVyby52MS5jb21tb24uUGF5bWVudE1ldGhvZFR5cGVCCLpIBYIBAiAAItcCChZDb25maXJtUGF5bWVudFJlc3BvbnNlEjMKEXNldHRsZW1lbnRfYW1vdW50GAogASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWwSGgoScGF5b3V0X3Byb3ZpZGVyX2lkGBQgASgNEmgKFHNldHRsZW1lbnRfYWRkcmVzc2VzGB4gAygLMkoudHplcm8udjEucGF5bWVudF9pbnRlbnQucHJvdmlkZXIuQ29uZmlybVBheW1lbnRSZXNwb25zZS5TZXR0bGVtZW50QWRkcmVzcxqBAQoRU2V0dGxlbWVudEFkZHJlc3MSKgoFY2hhaW4YCiABKA4yGy50emVyby52MS5jb21tb24uQmxvY2tjaGFpbhIvCgpzdGFibGVjb2luGBQgASgOMhsudHplcm8udjEuY29tbW9uLlN0YWJsZWNvaW4SDwoHYWRkcmVzcxgeIAEoCSJHChpSZWplY3RQYXltZW50SW50ZW50UmVxdWVzdBIZChFwYXltZW50X2ludGVudF9pZBgKIAEoBBIOCgZyZWFzb24YFCABKAkiHQobUmVqZWN0UGF5bWVudEludGVudFJlc3BvbnNlIkUKFENvbmZpcm1QYXlvdXRSZXF1ZXN0EhkKEXBheW1lbnRfaW50ZW50X2lkGAogASgEEhIKCnBheW1lbnRfaWQYFCABKAQiFwoVQ29uZmlybVBheW91dFJlc3BvbnNlIncKGENvbmZpcm1TZXR0bGVtZW50UmVxdWVzdBIvCgpibG9ja2NoYWluGAogASgOMhsudHplcm8udjEuY29tbW9uLkJsb2NrY2hhaW4SDwoHdHhfaGFzaBgUIAEoCRIZChFwYXltZW50X2ludGVudF9pZBgeIAMoBCIbChlDb25maXJtU2V0dGxlbWVudFJlc3BvbnNlMskDCg5OZXR3b3JrU2VydmljZRKIAQoOQ29uZmlybVBheW1lbnQSNy50emVyby52MS5wYXltZW50X2ludGVudC5wcm92aWRlci5Db25maXJtUGF5bWVudFJlcXVlc3QaOC50emVyby52MS5wYXltZW50X2ludGVudC5wcm92aWRlci5Db25maXJtUGF5bWVudFJlc3BvbnNlIgOQAgISlwEKE1JlamVjdFBheW1lbnRJbnRlbnQSPC50emVyby52MS5wYXltZW50X2ludGVudC5wcm92aWRlci5SZWplY3RQYXltZW50SW50ZW50UmVxdWVzdBo9LnR6ZXJvLnYxLnBheW1lbnRfaW50ZW50LnByb3ZpZGVyLlJlamVjdFBheW1lbnRJbnRlbnRSZXNwb25zZSIDkAICEpEBChFDb25maXJtU2V0dGxlbWVudBI6LnR6ZXJvLnYxLnBheW1lbnRfaW50ZW50LnByb3ZpZGVyLkNvbmZpcm1TZXR0bGVtZW50UmVxdWVzdBo7LnR6ZXJvLnYxLnBheW1lbnRfaW50ZW50LnByb3ZpZGVyLkNvbmZpcm1TZXR0bGVtZW50UmVzcG9uc2UiA5ACAjKzAgoPUHJvdmlkZXJTZXJ2aWNlEpcBChNDcmVhdGVQYXltZW50SW50ZW50EjwudHplcm8udjEucGF5bWVudF9pbnRlbnQucHJvdmlkZXIuQ3JlYXRlUGF5bWVudEludGVudFJlcXVlc3QaPS50emVyby52MS5wYXltZW50X2ludGVudC5wcm92aWRlci5DcmVhdGVQYXltZW50SW50ZW50UmVzcG9uc2UiA5ACAhKFAQoNQ29uZmlybVBheW91dBI2LnR6ZXJvLnYxLnBheW1lbnRfaW50ZW50LnByb3ZpZGVyLkNvbmZpcm1QYXlvdXRSZXF1ZXN0GjcudHplcm8udjEucGF5bWVudF9pbnRlbnQucHJvdmlkZXIuQ29uZmlybVBheW91dFJlc3BvbnNlIgOQAgJC1QEKJGNvbS50emVyby52MS5wYXltZW50X2ludGVudC5wcm92aWRlckINUHJvdmlkZXJQcm90b1ABogIEVFZQUKoCH1R6ZXJvLlYxLlBheW1lbnRJbnRlbnQuUHJvdmlkZXLKAh9UemVyb1xWMVxQYXltZW50SW50ZW50XFByb3ZpZGVy4gIrVHplcm9cVjFcUGF5bWVudEludGVudFxQcm92aWRlclxHUEJNZXRhZGF0YeoCIlR6ZXJvOjpWMTo6UGF5bWVudEludGVudDo6UHJvdmlkZXJiBnByb3RvMw", [file_tzero_v1_common_common, file_tzero_v1_common_payment_method, file_buf_validate_validate]);

/**
 * @generated from message tzero.v1.payment_intent.provider.CreatePaymentIntentRequest
 */
export type CreatePaymentIntentRequest = Message<"tzero.v1.payment_intent.provider.CreatePaymentIntentRequest"> & {
  /**
   * Payment intent ID must be positive
   *
   * idempotency key
   *
   * @generated from field: uint64 payment_intent_id = 10;
   */
  paymentIntentId: bigint;

  /**
   * ISO 4217 currency code (3 uppercase letters)
   *
   * pay-in currency
   *
   * @generated from field: string currency = 20;
   */
  currency: string;

  /**
   * Amount is required
   *
   * pay-in amount
   *
   * @generated from field: tzero.v1.common.Decimal amount = 30;
   */
  amount?: Decimal;
};

/**
 * Describes the message tzero.v1.payment_intent.provider.CreatePaymentIntentRequest.
 * Use `create(CreatePaymentIntentRequestSchema)` to create a new message.
 */
export const CreatePaymentIntentRequestSchema: GenMessage<CreatePaymentIntentRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 0);

/**
 * @generated from message tzero.v1.payment_intent.provider.CreatePaymentIntentResponse
 */
export type CreatePaymentIntentResponse = Message<"tzero.v1.payment_intent.provider.CreatePaymentIntentResponse"> & {
  /**
   * At least one payment method should be provided
   *
   * @generated from field: repeated tzero.v1.payment_intent.provider.CreatePaymentIntentResponse.PaymentMethod payment_methods = 20;
   */
  paymentMethods: CreatePaymentIntentResponse_PaymentMethod[];
};

/**
 * Describes the message tzero.v1.payment_intent.provider.CreatePaymentIntentResponse.
 * Use `create(CreatePaymentIntentResponseSchema)` to create a new message.
 */
export const CreatePaymentIntentResponseSchema: GenMessage<CreatePaymentIntentResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 1);

/**
 * @generated from message tzero.v1.payment_intent.provider.CreatePaymentIntentResponse.PaymentMethod
 */
export type CreatePaymentIntentResponse_PaymentMethod = Message<"tzero.v1.payment_intent.provider.CreatePaymentIntentResponse.PaymentMethod"> & {
  /**
   * Payment URL must be a valid URL
   *
   * @generated from field: string payment_url = 10;
   */
  paymentUrl: string;

  /**
   * Payment method must be specified
   *
   * @generated from field: tzero.v1.common.PaymentMethodType payment_method = 20;
   */
  paymentMethod: PaymentMethodType;
};

/**
 * Describes the message tzero.v1.payment_intent.provider.CreatePaymentIntentResponse.PaymentMethod.
 * Use `create(CreatePaymentIntentResponse_PaymentMethodSchema)` to create a new message.
 */
export const CreatePaymentIntentResponse_PaymentMethodSchema: GenMessage<CreatePaymentIntentResponse_PaymentMethod> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 1, 0);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmPaymentRequest
 */
export type ConfirmPaymentRequest = Message<"tzero.v1.payment_intent.provider.ConfirmPaymentRequest"> & {
  /**
   * Payment intent ID must be positive
   *
   * payment_intent_id from CreatePaymentIntentRequest
   *
   * @generated from field: uint64 payment_intent_id = 10;
   */
  paymentIntentId: bigint;

  /**
   * Payment method must be specified
   *
   * @generated from field: tzero.v1.common.PaymentMethodType payment_method = 20;
   */
  paymentMethod: PaymentMethodType;
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmPaymentRequest.
 * Use `create(ConfirmPaymentRequestSchema)` to create a new message.
 */
export const ConfirmPaymentRequestSchema: GenMessage<ConfirmPaymentRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 2);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmPaymentResponse
 */
export type ConfirmPaymentResponse = Message<"tzero.v1.payment_intent.provider.ConfirmPaymentResponse"> & {
  /**
   * settlement  amount denominated in settlement currency
   *
   * @generated from field: tzero.v1.common.Decimal settlement_amount = 10;
   */
  settlementAmount?: Decimal;

  /**
   * @generated from field: uint32 payout_provider_id = 20;
   */
  payoutProviderId: number;

  /**
   * payout provider could support multiple chains for settlement. Any of these could be used for settlement.
   *
   * @generated from field: repeated tzero.v1.payment_intent.provider.ConfirmPaymentResponse.SettlementAddress settlement_addresses = 30;
   */
  settlementAddresses: ConfirmPaymentResponse_SettlementAddress[];
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmPaymentResponse.
 * Use `create(ConfirmPaymentResponseSchema)` to create a new message.
 */
export const ConfirmPaymentResponseSchema: GenMessage<ConfirmPaymentResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 3);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmPaymentResponse.SettlementAddress
 */
export type ConfirmPaymentResponse_SettlementAddress = Message<"tzero.v1.payment_intent.provider.ConfirmPaymentResponse.SettlementAddress"> & {
  /**
   * @generated from field: tzero.v1.common.Blockchain chain = 10;
   */
  chain: Blockchain;

  /**
   * @generated from field: tzero.v1.common.Stablecoin stablecoin = 20;
   */
  stablecoin: Stablecoin;

  /**
   * @generated from field: string address = 30;
   */
  address: string;
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmPaymentResponse.SettlementAddress.
 * Use `create(ConfirmPaymentResponse_SettlementAddressSchema)` to create a new message.
 */
export const ConfirmPaymentResponse_SettlementAddressSchema: GenMessage<ConfirmPaymentResponse_SettlementAddress> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 3, 0);

/**
 * @generated from message tzero.v1.payment_intent.provider.RejectPaymentIntentRequest
 */
export type RejectPaymentIntentRequest = Message<"tzero.v1.payment_intent.provider.RejectPaymentIntentRequest"> & {
  /**
   * payment_intent_id from CreatePaymentIntentRequest
   *
   * @generated from field: uint64 payment_intent_id = 10;
   */
  paymentIntentId: bigint;

  /**
   * @generated from field: string reason = 20;
   */
  reason: string;
};

/**
 * Describes the message tzero.v1.payment_intent.provider.RejectPaymentIntentRequest.
 * Use `create(RejectPaymentIntentRequestSchema)` to create a new message.
 */
export const RejectPaymentIntentRequestSchema: GenMessage<RejectPaymentIntentRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 4);

/**
 * @generated from message tzero.v1.payment_intent.provider.RejectPaymentIntentResponse
 */
export type RejectPaymentIntentResponse = Message<"tzero.v1.payment_intent.provider.RejectPaymentIntentResponse"> & {
};

/**
 * Describes the message tzero.v1.payment_intent.provider.RejectPaymentIntentResponse.
 * Use `create(RejectPaymentIntentResponseSchema)` to create a new message.
 */
export const RejectPaymentIntentResponseSchema: GenMessage<RejectPaymentIntentResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 5);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmPayoutRequest
 */
export type ConfirmPayoutRequest = Message<"tzero.v1.payment_intent.provider.ConfirmPayoutRequest"> & {
  /**
   * payment_intent_id from CreatePaymentIntentRequest
   *
   * @generated from field: uint64 payment_intent_id = 10;
   */
  paymentIntentId: bigint;

  /**
   * corresponding payment_id for this payment intent
   *
   * @generated from field: uint64 payment_id = 20;
   */
  paymentId: bigint;
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmPayoutRequest.
 * Use `create(ConfirmPayoutRequestSchema)` to create a new message.
 */
export const ConfirmPayoutRequestSchema: GenMessage<ConfirmPayoutRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 6);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmPayoutResponse
 */
export type ConfirmPayoutResponse = Message<"tzero.v1.payment_intent.provider.ConfirmPayoutResponse"> & {
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmPayoutResponse.
 * Use `create(ConfirmPayoutResponseSchema)` to create a new message.
 */
export const ConfirmPayoutResponseSchema: GenMessage<ConfirmPayoutResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 7);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmSettlementRequest
 */
export type ConfirmSettlementRequest = Message<"tzero.v1.payment_intent.provider.ConfirmSettlementRequest"> & {
  /**
   * @generated from field: tzero.v1.common.Blockchain blockchain = 10;
   */
  blockchain: Blockchain;

  /**
   * @generated from field: string tx_hash = 20;
   */
  txHash: string;

  /**
   * list of payment_intent_id's for this settlement (on-chain) transaction
   *
   * @generated from field: repeated uint64 payment_intent_id = 30;
   */
  paymentIntentId: bigint[];
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmSettlementRequest.
 * Use `create(ConfirmSettlementRequestSchema)` to create a new message.
 */
export const ConfirmSettlementRequestSchema: GenMessage<ConfirmSettlementRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 8);

/**
 * @generated from message tzero.v1.payment_intent.provider.ConfirmSettlementResponse
 */
export type ConfirmSettlementResponse = Message<"tzero.v1.payment_intent.provider.ConfirmSettlementResponse"> & {
};

/**
 * Describes the message tzero.v1.payment_intent.provider.ConfirmSettlementResponse.
 * Use `create(ConfirmSettlementResponseSchema)` to create a new message.
 */
export const ConfirmSettlementResponseSchema: GenMessage<ConfirmSettlementResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_intent_provider_provider, 9);

/**
 * *
 * NetworkService is used by provider in order to notify network on payment intent updates
 *
 * @generated from service tzero.v1.payment_intent.provider.NetworkService
 */
export const NetworkService: GenService<{
  /**
   * *
   * Notify network about a successful payment for the corresponding payment intent
   *
   * @generated from rpc tzero.v1.payment_intent.provider.NetworkService.ConfirmPayment
   */
  confirmPayment: {
    methodKind: "unary";
    input: typeof ConfirmPaymentRequestSchema;
    output: typeof ConfirmPaymentResponseSchema;
  },
  /**
   * *
   * Notify network about a payment failure for the corresponding payment intent
   *
   * @generated from rpc tzero.v1.payment_intent.provider.NetworkService.RejectPaymentIntent
   */
  rejectPaymentIntent: {
    methodKind: "unary";
    input: typeof RejectPaymentIntentRequestSchema;
    output: typeof RejectPaymentIntentResponseSchema;
  },
  /**
   * *
   * Notify network about relation between payment intent and settlement transaction.
   * This method is not essential but helps to keep track of payment flow
   *
   * @generated from rpc tzero.v1.payment_intent.provider.NetworkService.ConfirmSettlement
   */
  confirmSettlement: {
    methodKind: "unary";
    input: typeof ConfirmSettlementRequestSchema;
    output: typeof ConfirmSettlementResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_tzero_v1_payment_intent_provider_provider, 0);

/**
 * *
 * ProviderService is implemented by provider to provide pay-in details fpr payment intents
 *
 * @generated from service tzero.v1.payment_intent.provider.ProviderService
 */
export const ProviderService: GenService<{
  /**
   * *
   * Network instructs provider to create payment details for the payment intent. Provide should return
   * a list of supported payment method along with URL where payer should be redirected.
   *
   * @generated from rpc tzero.v1.payment_intent.provider.ProviderService.CreatePaymentIntent
   */
  createPaymentIntent: {
    methodKind: "unary";
    input: typeof CreatePaymentIntentRequestSchema;
    output: typeof CreatePaymentIntentResponseSchema;
  },
  /**
   * *
   * Network notifies provider about successful payout for the corresponding payment intent
   *
   * @generated from rpc tzero.v1.payment_intent.provider.ProviderService.ConfirmPayout
   */
  confirmPayout: {
    methodKind: "unary";
    input: typeof ConfirmPayoutRequestSchema;
    output: typeof ConfirmPayoutResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_tzero_v1_payment_intent_provider_provider, 1);

