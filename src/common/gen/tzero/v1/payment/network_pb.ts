// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=js"
// @generated from file tzero/v1/payment/network.proto (package tzero.v1.payment, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Decimal } from "../common/common_pb.js";
import { file_tzero_v1_common_common } from "../common/common_pb.js";
import type { PaymentMethod, PaymentMethodType } from "../common/payment_method_pb.js";
import { file_tzero_v1_common_payment_method } from "../common/payment_method_pb.js";
import type { PaymentReceipt } from "../common/payment_receipt_pb.js";
import { file_tzero_v1_common_payment_receipt } from "../common/payment_receipt_pb.js";
import type { Person } from "../../../ivms101/v1/ivms/ivms101_pb.js";
import { file_ivms101_v1_ivms_ivms101 } from "../../../ivms101/v1/ivms/ivms101_pb.js";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file tzero/v1/payment/network.proto.
 */
export const file_tzero_v1_payment_network: GenFile = /*@__PURE__*/
  fileDesc("Ch50emVyby92MS9wYXltZW50L25ldHdvcmsucHJvdG8SEHR6ZXJvLnYxLnBheW1lbnQiigUKElVwZGF0ZVF1b3RlUmVxdWVzdBI7CgdwYXlfb3V0GAogAygLMioudHplcm8udjEucGF5bWVudC5VcGRhdGVRdW90ZVJlcXVlc3QuUXVvdGUSOgoGcGF5X2luGBQgAygLMioudHplcm8udjEucGF5bWVudC5VcGRhdGVRdW90ZVJlcXVlc3QuUXVvdGUa+gMKBVF1b3RlEiYKCGN1cnJlbmN5GAogASgJQhS6SBFyDzIKXltBLVpdezN9JJgBAxI3CgpxdW90ZV90eXBlGBQgASgOMhsudHplcm8udjEucGF5bWVudC5RdW90ZVR5cGVCBrpIA8gBARJCCg5wYXltZW50X21ldGhvZBgZIAEoDjIiLnR6ZXJvLnYxLmNvbW1vbi5QYXltZW50TWV0aG9kVHlwZUIGukgDyAEBEkgKBWJhbmRzGB4gAygLMi8udHplcm8udjEucGF5bWVudC5VcGRhdGVRdW90ZVJlcXVlc3QuUXVvdGUuQmFuZEIIukgFkgECCAESOAoKZXhwaXJhdGlvbhg8IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCLpIBbIBAkABEjUKCXRpbWVzdGFtcBhGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBrpIA8gBARqQAQoEQmFuZBIiCg9jbGllbnRfcXVvdGVfaWQYCiABKAlCCbpIBnIEEAEYQBI0CgptYXhfYW1vdW50GCggASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWxCBrpIA8gBARIuCgRyYXRlGDIgASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWxCBrpIA8gBASIVChNVcGRhdGVRdW90ZVJlc3BvbnNlIukCCg9HZXRRdW90ZVJlcXVlc3QSLQoPcGF5X2luX2N1cnJlbmN5GAogASgJQhS6SBFyDzIKXltBLVpdezN9JJgBAxI3CgZhbW91bnQYFCABKAsyHy50emVyby52MS5wYXltZW50LlBheW1lbnRBbW91bnRCBrpIA8gBARJBCg1wYXlfaW5fbWV0aG9kGB4gASgOMiIudHplcm8udjEuY29tbW9uLlBheW1lbnRNZXRob2RUeXBlQga6SAPIAQESLgoQcGF5X291dF9jdXJyZW5jeRgoIAEoCUIUukgRcg8yCl5bQS1aXXszfSSYAQMSQgoOcGF5X291dF9tZXRob2QYMiABKA4yIi50emVyby52MS5jb21tb24uUGF5bWVudE1ldGhvZFR5cGVCBrpIA8gBARI3CgpxdW90ZV90eXBlGDwgASgOMhsudHplcm8udjEucGF5bWVudC5RdW90ZVR5cGVCBrpIA8gBASKxAQoQR2V0UXVvdGVSZXNwb25zZRIuCgRyYXRlGAogASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWxCBrpIA8gBARI4CgpleHBpcmF0aW9uGBQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIIukgFsgECQAESMwoIcXVvdGVfaWQYHiABKAsyGS50emVyby52MS5wYXltZW50LlF1b3RlSWRCBrpIA8gBASKGBgoUQ3JlYXRlUGF5bWVudFJlcXVlc3QSJAoRcGF5bWVudF9jbGllbnRfaWQYCiABKAlCCbpIBnIEEAEYQBI3CgZhbW91bnQYHiABKAsyHy50emVyby52MS5wYXltZW50LlBheW1lbnRBbW91bnRCBrpIA8gBARJECgZwYXlfaW4YKCABKAsyLC50emVyby52MS5wYXltZW50LkNyZWF0ZVBheW1lbnRSZXF1ZXN0LlBheUluQga6SAPIAQESRgoHcGF5X291dBgtIAEoCzItLnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlcXVlc3QuUGF5T3V0Qga6SAPIAQESVAoQdHJhdmVsX3J1bGVfZGF0YRhkIAEoCzI1LnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlcXVlc3QuVHJhdmVsUnVsZURhdGFIAIgBARpzCgVQYXlJbhImCghjdXJyZW5jeRgKIAEoCUIUukgRcg8yCl5bQS1aXXszfSSYAQMSQgoOcGF5bWVudF9tZXRob2QYFCABKA4yIi50emVyby52MS5jb21tb24uUGF5bWVudE1ldGhvZFR5cGVCBrpIA8gBARqvAQoGUGF5T3V0EiYKCGN1cnJlbmN5GAogASgJQhS6SBFyDzIKXltBLVpdezN9JJgBAxI+Cg5wYXltZW50X21ldGhvZBgUIAEoCzIeLnR6ZXJvLnYxLmNvbW1vbi5QYXltZW50TWV0aG9kQga6SAPIAQESMAoIcXVvdGVfaWQYZCABKAsyGS50emVyby52MS5wYXltZW50LlF1b3RlSWRIAIgBAUILCglfcXVvdGVfaWQabwoOVHJhdmVsUnVsZURhdGESLQoKb3JpZ2luYXRvchgKIAMoCzIPLml2bXMxMDEuUGVyc29uQgi6SAWSAQIIARIuCgtiZW5lZmljaWFyeRgUIAMoCzIPLml2bXMxMDEuUGVyc29uQgi6SAWSAQIIAUITChFfdHJhdmVsX3J1bGVfZGF0YSJCCgdRdW90ZUlkEhkKCHF1b3RlX2lkGB4gASgDQge6SAQiAiAAEhwKC3Byb3ZpZGVyX2lkGCggASgFQge6SAQaAiAAIqADChVDcmVhdGVQYXltZW50UmVzcG9uc2USIgoRcGF5bWVudF9jbGllbnRfaWQYCiABKAlCB7pIBHICEAESQgoHc3VjY2VzcxgUIAEoCzIvLnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlc3BvbnNlLlN1Y2Nlc3NIABJCCgdmYWlsdXJlGB4gASgLMi8udHplcm8udjEucGF5bWVudC5DcmVhdGVQYXltZW50UmVzcG9uc2UuRmFpbHVyZUgAGpwBCgdTdWNjZXNzEhsKCnBheW1lbnRfaWQYCiABKARCB7pIBDICIAASNwoNcGF5X2luX2Ftb3VudBgUIAEoCzIYLnR6ZXJvLnYxLmNvbW1vbi5EZWNpbWFsQga6SAPIAQESOwoRc2V0dGxlbWVudF9hbW91bnQYHiABKAsyGC50emVyby52MS5jb21tb24uRGVjaW1hbEIGukgDyAEBGisKB0ZhaWx1cmUiIAoGUmVhc29uEhYKElJFQVNPTl9VTlNQRUNJRklFRBAAQg8KBnJlc3VsdBIFukgCCAEigQEKFENvbmZpcm1QYXlvdXRSZXF1ZXN0EhsKCnBheW1lbnRfaWQYCiABKARCB7pIBDICIAASGgoJcGF5b3V0X2lkGBQgASgEQge6SAQyAiAAEjAKB3JlY2VpcHQYHiABKAsyHy50emVyby52MS5jb21tb24uUGF5bWVudFJlY2VpcHQiFwoVQ29uZmlybVBheW91dFJlc3BvbnNlIocBCg1QYXltZW50QW1vdW50EjEKDXBheV9pbl9hbW91bnQYCiABKAsyGC50emVyby52MS5jb21tb24uRGVjaW1hbEgAEjIKDnBheV9vdXRfYW1vdW50GBQgASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWxIAEIPCgZhbW91bnQSBbpIAggBKkAKCVF1b3RlVHlwZRIaChZRVU9URV9UWVBFX1VOU1BFQ0lGSUVEEAASFwoTUVVPVEVfVFlQRV9SRUFMVElNRRABMpcDCg5OZXR3b3JrU2VydmljZRJfCgtVcGRhdGVRdW90ZRIkLnR6ZXJvLnYxLnBheW1lbnQuVXBkYXRlUXVvdGVSZXF1ZXN0GiUudHplcm8udjEucGF5bWVudC5VcGRhdGVRdW90ZVJlc3BvbnNlIgOQAgISVgoIR2V0UXVvdGUSIS50emVyby52MS5wYXltZW50LkdldFF1b3RlUmVxdWVzdBoiLnR6ZXJvLnYxLnBheW1lbnQuR2V0UXVvdGVSZXNwb25zZSIDkAIBEmUKDUNyZWF0ZVBheW1lbnQSJi50emVyby52MS5wYXltZW50LkNyZWF0ZVBheW1lbnRSZXF1ZXN0GicudHplcm8udjEucGF5bWVudC5DcmVhdGVQYXltZW50UmVzcG9uc2UiA5ACAhJlCg1Db25maXJtUGF5b3V0EiYudHplcm8udjEucGF5bWVudC5Db25maXJtUGF5b3V0UmVxdWVzdBonLnR6ZXJvLnYxLnBheW1lbnQuQ29uZmlybVBheW91dFJlc3BvbnNlIgOQAgJChgEKFGNvbS50emVyby52MS5wYXltZW50QgxOZXR3b3JrUHJvdG9QAaICA1RWUKoCEFR6ZXJvLlYxLlBheW1lbnTKAhBUemVyb1xWMVxQYXltZW504gIcVHplcm9cVjFcUGF5bWVudFxHUEJNZXRhZGF0YeoCElR6ZXJvOjpWMTo6UGF5bWVudGIGcHJvdG8z", [file_tzero_v1_common_common, file_tzero_v1_common_payment_method, file_tzero_v1_common_payment_receipt, file_ivms101_v1_ivms_ivms101, file_google_protobuf_timestamp, file_buf_validate_validate]);

/**
 *
 * Base currency is always USD, so the quotes are always in USD/currency format.
 *
 * @generated from message tzero.v1.payment.UpdateQuoteRequest
 */
export type UpdateQuoteRequest = Message<"tzero.v1.payment.UpdateQuoteRequest"> & {
  /**
   * *
   * Zero or more quotes for pay-out operations, each quote must have a unique currency, and one or more bands, with the
   * unique client_quote_id for each band.
   *
   * @generated from field: repeated tzero.v1.payment.UpdateQuoteRequest.Quote pay_out = 10;
   */
  payOut: UpdateQuoteRequest_Quote[];

  /**
   * *
   * Zero or more quotes for pay-in operations, each quote must have a unique currency, and one or more bands, with the
   * unique client_quote_id for each band.
   *
   * @generated from field: repeated tzero.v1.payment.UpdateQuoteRequest.Quote pay_in = 20;
   */
  payIn: UpdateQuoteRequest_Quote[];
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteRequest.
 * Use `create(UpdateQuoteRequestSchema)` to create a new message.
 */
export const UpdateQuoteRequestSchema: GenMessage<UpdateQuoteRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 0);

/**
 * @generated from message tzero.v1.payment.UpdateQuoteRequest.Quote
 */
export type UpdateQuoteRequest_Quote = Message<"tzero.v1.payment.UpdateQuoteRequest.Quote"> & {
  /**
   * BRL, EUR, GBP, etc. (ISO 4217 currency code)
   *
   * @generated from field: string currency = 10;
   */
  currency: string;

  /**
   * @generated from field: tzero.v1.payment.QuoteType quote_type = 20;
   */
  quoteType: QuoteType;

  /**
   * Payment method must be specified
   *
   * @generated from field: tzero.v1.common.PaymentMethodType payment_method = 25;
   */
  paymentMethod: PaymentMethodType;

  /**
   * list of bands for this quote
   *
   * @generated from field: repeated tzero.v1.payment.UpdateQuoteRequest.Quote.Band bands = 30;
   */
  bands: UpdateQuoteRequest_Quote_Band[];

  /**
   * expiration time of the quote
   *
   * @generated from field: google.protobuf.Timestamp expiration = 60;
   */
  expiration?: Timestamp;

  /**
   * timestamp quote was created
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 70;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteRequest.Quote.
 * Use `create(UpdateQuoteRequest_QuoteSchema)` to create a new message.
 */
export const UpdateQuoteRequest_QuoteSchema: GenMessage<UpdateQuoteRequest_Quote> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 0, 0);

/**
 * @generated from message tzero.v1.payment.UpdateQuoteRequest.Quote.Band
 */
export type UpdateQuoteRequest_Quote_Band = Message<"tzero.v1.payment.UpdateQuoteRequest.Quote.Band"> & {
  /**
   * unique client generated id for this band
   *
   * @generated from field: string client_quote_id = 10;
   */
  clientQuoteId: string;

  /**
   * max amount of USD this quote is applicable for. Please look into documentation for valid amounts.
   *
   * @generated from field: tzero.v1.common.Decimal max_amount = 40;
   */
  maxAmount?: Decimal;

  /**
   * USD/currency rate
   *
   * @generated from field: tzero.v1.common.Decimal rate = 50;
   */
  rate?: Decimal;
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteRequest.Quote.Band.
 * Use `create(UpdateQuoteRequest_Quote_BandSchema)` to create a new message.
 */
export const UpdateQuoteRequest_Quote_BandSchema: GenMessage<UpdateQuoteRequest_Quote_Band> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 0, 0, 0);

/**
 * @generated from message tzero.v1.payment.UpdateQuoteResponse
 */
export type UpdateQuoteResponse = Message<"tzero.v1.payment.UpdateQuoteResponse"> & {
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteResponse.
 * Use `create(UpdateQuoteResponseSchema)` to create a new message.
 */
export const UpdateQuoteResponseSchema: GenMessage<UpdateQuoteResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 1);

/**
 * @generated from message tzero.v1.payment.GetQuoteRequest
 */
export type GetQuoteRequest = Message<"tzero.v1.payment.GetQuoteRequest"> & {
  /**
   * ISO 4217 currency code, e.g. EUR, GBP, etc. in which the payout should be made
   *
   * @generated from field: string pay_in_currency = 10;
   */
  payInCurrency: string;

  /**
   * amount
   *
   * @generated from field: tzero.v1.payment.PaymentAmount amount = 20;
   */
  amount?: PaymentAmount;

  /**
   * payment method to use for the payout, e.g. bank transfer, card, etc.
   *
   * @generated from field: tzero.v1.common.PaymentMethodType pay_in_method = 30;
   */
  payInMethod: PaymentMethodType;

  /**
   * ISO 4217 currency code, e.g. EUR, GBP, etc. in which the payout should be made
   *
   * @generated from field: string pay_out_currency = 40;
   */
  payOutCurrency: string;

  /**
   * payment method to use for the payout, e.g. bank transfer, card, etc.
   *
   * @generated from field: tzero.v1.common.PaymentMethodType pay_out_method = 50;
   */
  payOutMethod: PaymentMethodType;

  /**
   * type of the quote, e.g. real-time or guaranteed
   *
   * @generated from field: tzero.v1.payment.QuoteType quote_type = 60;
   */
  quoteType: QuoteType;
};

/**
 * Describes the message tzero.v1.payment.GetQuoteRequest.
 * Use `create(GetQuoteRequestSchema)` to create a new message.
 */
export const GetQuoteRequestSchema: GenMessage<GetQuoteRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 2);

/**
 * @generated from message tzero.v1.payment.GetQuoteResponse
 */
export type GetQuoteResponse = Message<"tzero.v1.payment.GetQuoteResponse"> & {
  /**
   * rate in USD/currency, e.g. 1.2345 for 1 USD = 1.2345 EUR
   *
   * @generated from field: tzero.v1.common.Decimal rate = 10;
   */
  rate?: Decimal;

  /**
   * expiration time of the quote
   *
   * @generated from field: google.protobuf.Timestamp expiration = 20;
   */
  expiration?: Timestamp;

  /**
   * @generated from field: tzero.v1.payment.QuoteId quote_id = 30;
   */
  quoteId?: QuoteId;
};

/**
 * Describes the message tzero.v1.payment.GetQuoteResponse.
 * Use `create(GetQuoteResponseSchema)` to create a new message.
 */
export const GetQuoteResponseSchema: GenMessage<GetQuoteResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 3);

/**
 * @generated from message tzero.v1.payment.CreatePaymentRequest
 */
export type CreatePaymentRequest = Message<"tzero.v1.payment.CreatePaymentRequest"> & {
  /**
   * unique client generated id for this payment
   *
   * @generated from field: string payment_client_id = 10;
   */
  paymentClientId: string;

  /**
   * @generated from field: tzero.v1.payment.PaymentAmount amount = 30;
   */
  amount?: PaymentAmount;

  /**
   * @generated from field: tzero.v1.payment.CreatePaymentRequest.PayIn pay_in = 40;
   */
  payIn?: CreatePaymentRequest_PayIn;

  /**
   * @generated from field: tzero.v1.payment.CreatePaymentRequest.PayOut pay_out = 45;
   */
  payOut?: CreatePaymentRequest_PayOut;

  /**
   * @generated from field: optional tzero.v1.payment.CreatePaymentRequest.TravelRuleData travel_rule_data = 100;
   */
  travelRuleData?: CreatePaymentRequest_TravelRuleData;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.
 * Use `create(CreatePaymentRequestSchema)` to create a new message.
 */
export const CreatePaymentRequestSchema: GenMessage<CreatePaymentRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4);

/**
 * Provider must submit quotes to the network for the specified pay-in currency and payment method
 *
 * @generated from message tzero.v1.payment.CreatePaymentRequest.PayIn
 */
export type CreatePaymentRequest_PayIn = Message<"tzero.v1.payment.CreatePaymentRequest.PayIn"> & {
  /**
   * @generated from field: string currency = 10;
   */
  currency: string;

  /**
   * @generated from field: tzero.v1.common.PaymentMethodType payment_method = 20;
   */
  paymentMethod: PaymentMethodType;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.PayIn.
 * Use `create(CreatePaymentRequest_PayInSchema)` to create a new message.
 */
export const CreatePaymentRequest_PayInSchema: GenMessage<CreatePaymentRequest_PayIn> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4, 0);

/**
 * @generated from message tzero.v1.payment.CreatePaymentRequest.PayOut
 */
export type CreatePaymentRequest_PayOut = Message<"tzero.v1.payment.CreatePaymentRequest.PayOut"> & {
  /**
   * @generated from field: string currency = 10;
   */
  currency: string;

  /**
   * @generated from field: tzero.v1.common.PaymentMethod payment_method = 20;
   */
  paymentMethod?: PaymentMethod;

  /**
   * if specified, must be a valid quoteId that was previously returned by the GetPayoutQuote method otherwise last available quote will be used
   *
   * @generated from field: optional tzero.v1.payment.QuoteId quote_id = 100;
   */
  quoteId?: QuoteId;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.PayOut.
 * Use `create(CreatePaymentRequest_PayOutSchema)` to create a new message.
 */
export const CreatePaymentRequest_PayOutSchema: GenMessage<CreatePaymentRequest_PayOut> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4, 1);

/**
 * @generated from message tzero.v1.payment.CreatePaymentRequest.TravelRuleData
 */
export type CreatePaymentRequest_TravelRuleData = Message<"tzero.v1.payment.CreatePaymentRequest.TravelRuleData"> & {
  /**
   * the natural or legal person that requests payment with originating provider
   *
   * @generated from field: repeated ivms101.Person originator = 10;
   */
  originator: Person[];

  /**
   * the natural or legal person or legal arrangement who is identified
   * by the originator as the receiver of the requested payment.
   *
   * @generated from field: repeated ivms101.Person beneficiary = 20;
   */
  beneficiary: Person[];
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.TravelRuleData.
 * Use `create(CreatePaymentRequest_TravelRuleDataSchema)` to create a new message.
 */
export const CreatePaymentRequest_TravelRuleDataSchema: GenMessage<CreatePaymentRequest_TravelRuleData> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4, 2);

/**
 * @generated from message tzero.v1.payment.QuoteId
 */
export type QuoteId = Message<"tzero.v1.payment.QuoteId"> & {
  /**
   * unique identifier of the quote within the specified provider
   *
   * @generated from field: int64 quote_id = 30;
   */
  quoteId: bigint;

  /**
   * provider id of the quote
   *
   * @generated from field: int32 provider_id = 40;
   */
  providerId: number;
};

/**
 * Describes the message tzero.v1.payment.QuoteId.
 * Use `create(QuoteIdSchema)` to create a new message.
 */
export const QuoteIdSchema: GenMessage<QuoteId> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 5);

/**
 * @generated from message tzero.v1.payment.CreatePaymentResponse
 */
export type CreatePaymentResponse = Message<"tzero.v1.payment.CreatePaymentResponse"> & {
  /**
   * client generated id supplied in the request
   *
   * @generated from field: string payment_client_id = 10;
   */
  paymentClientId: string;

  /**
   * @generated from oneof tzero.v1.payment.CreatePaymentResponse.result
   */
  result: {
    /**
     * *
     * Success response - means the payment was accepted, but the payout is not yet completed. This means, the network found
     * a suitable quote for the payout currency and amount, and instructed the payout provider to process the payout.
     *
     * @generated from field: tzero.v1.payment.CreatePaymentResponse.Success success = 20;
     */
    value: CreatePaymentResponse_Success;
    case: "success";
  } | {
    /**
     * *
     * Failure response - means the payment was not accepted, e.g. the network could not find a suitable quote for the
     * payout currency and amount, or the credit limit is exceeded for the available quotes.
     *
     * @generated from field: tzero.v1.payment.CreatePaymentResponse.Failure failure = 30;
     */
    value: CreatePaymentResponse_Failure;
    case: "failure";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentResponse.
 * Use `create(CreatePaymentResponseSchema)` to create a new message.
 */
export const CreatePaymentResponseSchema: GenMessage<CreatePaymentResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 6);

/**
 * @generated from message tzero.v1.payment.CreatePaymentResponse.Success
 */
export type CreatePaymentResponse_Success = Message<"tzero.v1.payment.CreatePaymentResponse.Success"> & {
  /**
   * payment id assigned by the network
   *
   * @generated from field: uint64 payment_id = 10;
   */
  paymentId: bigint;

  /**
   * @generated from field: tzero.v1.common.Decimal pay_in_amount = 20;
   */
  payInAmount?: Decimal;

  /**
   * @generated from field: tzero.v1.common.Decimal settlement_amount = 30;
   */
  settlementAmount?: Decimal;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentResponse.Success.
 * Use `create(CreatePaymentResponse_SuccessSchema)` to create a new message.
 */
export const CreatePaymentResponse_SuccessSchema: GenMessage<CreatePaymentResponse_Success> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 6, 0);

/**
 * @generated from message tzero.v1.payment.CreatePaymentResponse.Failure
 */
export type CreatePaymentResponse_Failure = Message<"tzero.v1.payment.CreatePaymentResponse.Failure"> & {
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentResponse.Failure.
 * Use `create(CreatePaymentResponse_FailureSchema)` to create a new message.
 */
export const CreatePaymentResponse_FailureSchema: GenMessage<CreatePaymentResponse_Failure> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 6, 1);

/**
 * @generated from enum tzero.v1.payment.CreatePaymentResponse.Failure.Reason
 */
export enum CreatePaymentResponse_Failure_Reason {
  /**
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
}

/**
 * Describes the enum tzero.v1.payment.CreatePaymentResponse.Failure.Reason.
 */
export const CreatePaymentResponse_Failure_ReasonSchema: GenEnum<CreatePaymentResponse_Failure_Reason> = /*@__PURE__*/
  enumDesc(file_tzero_v1_payment_network, 6, 1, 0);

/**
 * @generated from message tzero.v1.payment.ConfirmPayoutRequest
 */
export type ConfirmPayoutRequest = Message<"tzero.v1.payment.ConfirmPayoutRequest"> & {
  /**
   * payment id assigned by the network, this is the same payment id that was provided in the PayoutRequest
   *
   * @generated from field: uint64 payment_id = 10;
   */
  paymentId: bigint;

  /**
   * payout id assigned by the payout provider, this is the same payout id that was provided in the PayoutRequest
   *
   * @generated from field: uint64 payout_id = 20;
   */
  payoutId: bigint;

  /**
   * *
   * Payment receipt might contain metadata about payment recognizable by pay-in provider.
   *
   * @generated from field: tzero.v1.common.PaymentReceipt receipt = 30;
   */
  receipt?: PaymentReceipt;
};

/**
 * Describes the message tzero.v1.payment.ConfirmPayoutRequest.
 * Use `create(ConfirmPayoutRequestSchema)` to create a new message.
 */
export const ConfirmPayoutRequestSchema: GenMessage<ConfirmPayoutRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 7);

/**
 * @generated from message tzero.v1.payment.ConfirmPayoutResponse
 */
export type ConfirmPayoutResponse = Message<"tzero.v1.payment.ConfirmPayoutResponse"> & {
};

/**
 * Describes the message tzero.v1.payment.ConfirmPayoutResponse.
 * Use `create(ConfirmPayoutResponseSchema)` to create a new message.
 */
export const ConfirmPayoutResponseSchema: GenMessage<ConfirmPayoutResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 8);

/**
 * Payment amount could be specified eiter as pay-in amount and then converted to corresponding amount of pay-out amount
 * or as pay-out amount, so that pay-in and settlement amounts are calculated accordingly
 *
 * @generated from message tzero.v1.payment.PaymentAmount
 */
export type PaymentAmount = Message<"tzero.v1.payment.PaymentAmount"> & {
  /**
   * @generated from oneof tzero.v1.payment.PaymentAmount.amount
   */
  amount: {
    /**
     * Amount in the pay-in currency
     *
     * @generated from field: tzero.v1.common.Decimal pay_in_amount = 10;
     */
    value: Decimal;
    case: "payInAmount";
  } | {
    /**
     * Amount in the pay-out currency
     *
     * @generated from field: tzero.v1.common.Decimal pay_out_amount = 20;
     */
    value: Decimal;
    case: "payOutAmount";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tzero.v1.payment.PaymentAmount.
 * Use `create(PaymentAmountSchema)` to create a new message.
 */
export const PaymentAmountSchema: GenMessage<PaymentAmount> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 9);

/**
 * @generated from enum tzero.v1.payment.QuoteType
 */
export enum QuoteType {
  /**
   * @generated from enum value: QUOTE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * real-time quote must be valid at least for 30 seconds (TBD)
   *
   * @generated from enum value: QUOTE_TYPE_REALTIME = 1;
   */
  REALTIME = 1,
}

/**
 * Describes the enum tzero.v1.payment.QuoteType.
 */
export const QuoteTypeSchema: GenEnum<QuoteType> = /*@__PURE__*/
  enumDesc(file_tzero_v1_payment_network, 0);

/**
 * *
 * This service is used by provider to interact with the Network, e.g. push quotes and initiate payments.
 *
 * All methods of this service are idempotent, meaning they are safe to retry and multiple calls with the same parameters will have no additional effect.
 *
 * @generated from service tzero.v1.payment.NetworkService
 */
export const NetworkService: GenService<{
  /**
   * *
   * Used by the provider to publish pay-in and pay-out quotes (FX rates) into the network.
   * These quotes include tiered pricing bands and an expiration timestamp.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.UpdateQuote
   */
  updateQuote: {
    methodKind: "unary";
    input: typeof UpdateQuoteRequestSchema;
    output: typeof UpdateQuoteResponseSchema;
  },
  /**
   * *
   * Request the best available quote for a payout in a specific currency, for a given amount.
   * If the payout quote exists, but the credit limit is exceeded, this quote will not be considered.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.GetQuote
   */
  getQuote: {
    methodKind: "unary";
    input: typeof GetQuoteRequestSchema;
    output: typeof GetQuoteResponseSchema;
  },
  /**
   * *
   * Submit a request to create a new payment. PayIn currency and QuoteId are the optional parameters.
   * If the payIn currency is not specified, the network will use USD as the default payIn currency, and considering
   * the amount in USD.
   * If specified, it must be a valid currency code - in this case the network will try to find the payIn quote for the
   * specified currency and considering the band from the provider initiated this request. So this is only possible, if
   * this provider already submitted the payIn quote for the specified currency using UpdateQuote rpc.
   * If the quoteID is specified, it must be a valid quoteId that was previously returned by the GetPayoutQuote method.
   * If the quoteId is not specified, the network will try to find a suitable quote for the payout currency and amount,
   * same way as GetPayoutQuote rpc.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.CreatePayment
   */
  createPayment: {
    methodKind: "unary";
    input: typeof CreatePaymentRequestSchema;
    output: typeof CreatePaymentResponseSchema;
  },
  /**
   * *
   * Inform the network that a payout has been completed. This endpoint is called by the payout
   * provider, specifying the payment ID and payout ID, which was provided when the payout request was made to this provider.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.ConfirmPayout
   */
  confirmPayout: {
    methodKind: "unary";
    input: typeof ConfirmPayoutRequestSchema;
    output: typeof ConfirmPayoutResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_tzero_v1_payment_network, 0);

