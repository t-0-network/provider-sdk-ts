// @generated by protoc-gen-es v2.6.2 with parameter "target=ts,import_extension=js"
// @generated from file tzero/v1/payment/network.proto (package tzero.v1.payment, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Decimal } from "../common/common_pb.js";
import { file_tzero_v1_common_common } from "../common/common_pb.js";
import type { PaymentMethod, PaymentMethodType } from "../common/payment_method_pb.js";
import { file_tzero_v1_common_payment_method } from "../common/payment_method_pb.js";
import type { PaymentReceipt } from "../common/payment_receipt_pb.js";
import { file_tzero_v1_common_payment_receipt } from "../common/payment_receipt_pb.js";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file tzero/v1/payment/network.proto.
 */
export const file_tzero_v1_payment_network: GenFile = /*@__PURE__*/
  fileDesc("Ch50emVyby92MS9wYXltZW50L25ldHdvcmsucHJvdG8SEHR6ZXJvLnYxLnBheW1lbnQirAQKElVwZGF0ZVF1b3RlUmVxdWVzdBI7CgdwYXlfb3V0GAogAygLMioudHplcm8udjEucGF5bWVudC5VcGRhdGVRdW90ZVJlcXVlc3QuUXVvdGUSOgoGcGF5X2luGBQgAygLMioudHplcm8udjEucGF5bWVudC5VcGRhdGVRdW90ZVJlcXVlc3QuUXVvdGUanAMKBVF1b3RlEhAKCGN1cnJlbmN5GAogASgJEi8KCnF1b3RlX3R5cGUYFCABKA4yGy50emVyby52MS5wYXltZW50LlF1b3RlVHlwZRI6Cg5wYXltZW50X21ldGhvZBgZIAEoDjIiLnR6ZXJvLnYxLmNvbW1vbi5QYXltZW50TWV0aG9kVHlwZRI+CgViYW5kcxgeIAMoCzIvLnR6ZXJvLnYxLnBheW1lbnQuVXBkYXRlUXVvdGVSZXF1ZXN0LlF1b3RlLkJhbmQSLgoKZXhwaXJhdGlvbhg8IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJdGltZXN0YW1wGEYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBp1CgRCYW5kEhcKD2NsaWVudF9xdW90ZV9pZBgKIAEoCRIsCgptYXhfYW1vdW50GCggASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWwSJgoEcmF0ZRgyIAEoCzIYLnR6ZXJvLnYxLmNvbW1vbi5EZWNpbWFsIhUKE1VwZGF0ZVF1b3RlUmVzcG9uc2UixgEKFUdldFBheW91dFF1b3RlUmVxdWVzdBIXCg9wYXlvdXRfY3VycmVuY3kYCiABKAkSKAoGYW1vdW50GBQgASgLMhgudHplcm8udjEuY29tbW9uLkRlY2ltYWwSLwoKcXVvdGVfdHlwZRgeIAEoDjIbLnR6ZXJvLnYxLnBheW1lbnQuUXVvdGVUeXBlEjkKDXBheW91dF9tZXRob2QYKCABKA4yIi50emVyby52MS5jb21tb24uUGF5bWVudE1ldGhvZFR5cGUinQEKFkdldFBheW91dFF1b3RlUmVzcG9uc2USJgoEcmF0ZRgKIAEoCzIYLnR6ZXJvLnYxLmNvbW1vbi5EZWNpbWFsEi4KCmV4cGlyYXRpb24YFCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEisKCHF1b3RlX2lkGB4gASgLMhkudHplcm8udjEucGF5bWVudC5RdW90ZUlkIvEFChRDcmVhdGVQYXltZW50UmVxdWVzdBIZChFwYXltZW50X2NsaWVudF9pZBgKIAEoCRIXCg9wYXlvdXRfY3VycmVuY3kYFCABKAkSNgoOcGF5b3V0X2RldGFpbHMYGSABKAsyHi50emVyby52MS5jb21tb24uUGF5bWVudE1ldGhvZBIoCgZhbW91bnQYHiABKAsyGC50emVyby52MS5jb21tb24uRGVjaW1hbBIbCg5wYXlpbl9jdXJyZW5jeRgoIAEoCUgAiAEBEj0KBnNlbmRlchgyIAEoCzItLnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlcXVlc3QuU2VuZGVyEkMKCXJlY2lwaWVudBg8IAEoCzIwLnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlcXVlc3QuUmVjaXBpZW50EhoKCXJlZmVyZW5jZRhGIAEoCUICGAFIAYgBARIwCghxdW90ZV9pZBhkIAEoCzIZLnR6ZXJvLnYxLnBheW1lbnQuUXVvdGVJZEgCiAEBGmIKBlNlbmRlchJOCg5wcml2YXRlX3BlcnNvbhgKIAEoCzI0LnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlcXVlc3QuUHJpdmF0ZVBlcnNvbkgAQggKBnNlbmRlchpoCglSZWNpcGllbnQSTgoOcHJpdmF0ZV9wZXJzb24YCiABKAsyNC50emVyby52MS5wYXltZW50LkNyZWF0ZVBheW1lbnRSZXF1ZXN0LlByaXZhdGVQZXJzb25IAEILCglyZWNpcGllbnQaWAoNUHJpdmF0ZVBlcnNvbhIgChhwcml2YXRlX3BlcnNvbl9jbGllbnRfaWQYCiABKAkSEgoKZmlyc3RfbmFtZRgUIAEoCRIRCglsYXN0X25hbWUYHiABKAlCEQoPX3BheWluX2N1cnJlbmN5QgwKCl9yZWZlcmVuY2VCCwoJX3F1b3RlX2lkIjAKB1F1b3RlSWQSEAoIcXVvdGVfaWQYHiABKAMSEwoLcHJvdmlkZXJfaWQYKCABKAUikAIKFUNyZWF0ZVBheW1lbnRSZXNwb25zZRIZChFwYXltZW50X2NsaWVudF9pZBgKIAEoCRJCCgdzdWNjZXNzGBQgASgLMi8udHplcm8udjEucGF5bWVudC5DcmVhdGVQYXltZW50UmVzcG9uc2UuU3VjY2Vzc0gAEkIKB2ZhaWx1cmUYHiABKAsyLy50emVyby52MS5wYXltZW50LkNyZWF0ZVBheW1lbnRSZXNwb25zZS5GYWlsdXJlSAAaHQoHU3VjY2VzcxISCgpwYXltZW50X2lkGAogASgDGisKB0ZhaWx1cmUiIAoGUmVhc29uEhYKElJFQVNPTl9VTlNQRUNJRklFRBAAQggKBnJlc3VsdCJvChRDb25maXJtUGF5b3V0UmVxdWVzdBISCgpwYXltZW50X2lkGAogASgDEhEKCXBheW91dF9pZBgUIAEoAxIwCgdyZWNlaXB0GB4gASgLMh8udHplcm8udjEuY29tbW9uLlBheW1lbnRSZWNlaXB0IhcKFUNvbmZpcm1QYXlvdXRSZXNwb25zZSpACglRdW90ZVR5cGUSGgoWUVVPVEVfVFlQRV9VTlNQRUNJRklFRBAAEhcKE1FVT1RFX1RZUEVfUkVBTFRJTUUQATKpAwoOTmV0d29ya1NlcnZpY2USXwoLVXBkYXRlUXVvdGUSJC50emVyby52MS5wYXltZW50LlVwZGF0ZVF1b3RlUmVxdWVzdBolLnR6ZXJvLnYxLnBheW1lbnQuVXBkYXRlUXVvdGVSZXNwb25zZSIDkAICEmgKDkdldFBheW91dFF1b3RlEicudHplcm8udjEucGF5bWVudC5HZXRQYXlvdXRRdW90ZVJlcXVlc3QaKC50emVyby52MS5wYXltZW50LkdldFBheW91dFF1b3RlUmVzcG9uc2UiA5ACARJlCg1DcmVhdGVQYXltZW50EiYudHplcm8udjEucGF5bWVudC5DcmVhdGVQYXltZW50UmVxdWVzdBonLnR6ZXJvLnYxLnBheW1lbnQuQ3JlYXRlUGF5bWVudFJlc3BvbnNlIgOQAgISZQoNQ29uZmlybVBheW91dBImLnR6ZXJvLnYxLnBheW1lbnQuQ29uZmlybVBheW91dFJlcXVlc3QaJy50emVyby52MS5wYXltZW50LkNvbmZpcm1QYXlvdXRSZXNwb25zZSIDkAICQoYBChRjb20udHplcm8udjEucGF5bWVudEIMTmV0d29ya1Byb3RvUAGiAgNUVlCqAhBUemVyby5WMS5QYXltZW50ygIQVHplcm9cVjFcUGF5bWVudOICHFR6ZXJvXFYxXFBheW1lbnRcR1BCTWV0YWRhdGHqAhJUemVybzo6VjE6OlBheW1lbnRiBnByb3RvMw", [file_tzero_v1_common_common, file_tzero_v1_common_payment_method, file_tzero_v1_common_payment_receipt, file_google_protobuf_timestamp]);

/**
 *
 * Base currency is always USD, so the quotes are always in USD/currency format.
 *
 * @generated from message tzero.v1.payment.UpdateQuoteRequest
 */
export type UpdateQuoteRequest = Message<"tzero.v1.payment.UpdateQuoteRequest"> & {
  /**
   * *
   * Zero or more quotes for pay-out operations, each quote must have a unique currency, and one or more bands, with the
   * unique client_quote_id for each band.
   *
   * @generated from field: repeated tzero.v1.payment.UpdateQuoteRequest.Quote pay_out = 10;
   */
  payOut: UpdateQuoteRequest_Quote[];

  /**
   * *
   * Zero or more quotes for pay-in operations, each quote must have a unique currency, and one or more bands, with the
   * unique client_quote_id for each band.
   *
   * @generated from field: repeated tzero.v1.payment.UpdateQuoteRequest.Quote pay_in = 20;
   */
  payIn: UpdateQuoteRequest_Quote[];
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteRequest.
 * Use `create(UpdateQuoteRequestSchema)` to create a new message.
 */
export const UpdateQuoteRequestSchema: GenMessage<UpdateQuoteRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 0);

/**
 * @generated from message tzero.v1.payment.UpdateQuoteRequest.Quote
 */
export type UpdateQuoteRequest_Quote = Message<"tzero.v1.payment.UpdateQuoteRequest.Quote"> & {
  /**
   * BRL, EUR, GBP, etc. (ISO 4217 currency code)
   *
   * @generated from field: string currency = 10;
   */
  currency: string;

  /**
   * type of the quote, e.g. real-time or guaranteed
   *
   * @generated from field: tzero.v1.payment.QuoteType quote_type = 20;
   */
  quoteType: QuoteType;

  /**
   * @generated from field: tzero.v1.common.PaymentMethodType payment_method = 25;
   */
  paymentMethod: PaymentMethodType;

  /**
   * list of bands for this quote
   *
   * @generated from field: repeated tzero.v1.payment.UpdateQuoteRequest.Quote.Band bands = 30;
   */
  bands: UpdateQuoteRequest_Quote_Band[];

  /**
   * expiration time of the quote
   *
   * @generated from field: google.protobuf.Timestamp expiration = 60;
   */
  expiration?: Timestamp;

  /**
   * timestamp quote was created
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 70;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteRequest.Quote.
 * Use `create(UpdateQuoteRequest_QuoteSchema)` to create a new message.
 */
export const UpdateQuoteRequest_QuoteSchema: GenMessage<UpdateQuoteRequest_Quote> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 0, 0);

/**
 * @generated from message tzero.v1.payment.UpdateQuoteRequest.Quote.Band
 */
export type UpdateQuoteRequest_Quote_Band = Message<"tzero.v1.payment.UpdateQuoteRequest.Quote.Band"> & {
  /**
   * unique client generated id for this band
   *
   * @generated from field: string client_quote_id = 10;
   */
  clientQuoteId: string;

  /**
   * max amount of USD this quote is applicable for. Please look into documentation for valid amounts.
   *
   * @generated from field: tzero.v1.common.Decimal max_amount = 40;
   */
  maxAmount?: Decimal;

  /**
   * USD/currency rate
   *
   * @generated from field: tzero.v1.common.Decimal rate = 50;
   */
  rate?: Decimal;
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteRequest.Quote.Band.
 * Use `create(UpdateQuoteRequest_Quote_BandSchema)` to create a new message.
 */
export const UpdateQuoteRequest_Quote_BandSchema: GenMessage<UpdateQuoteRequest_Quote_Band> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 0, 0, 0);

/**
 * @generated from message tzero.v1.payment.UpdateQuoteResponse
 */
export type UpdateQuoteResponse = Message<"tzero.v1.payment.UpdateQuoteResponse"> & {
};

/**
 * Describes the message tzero.v1.payment.UpdateQuoteResponse.
 * Use `create(UpdateQuoteResponseSchema)` to create a new message.
 */
export const UpdateQuoteResponseSchema: GenMessage<UpdateQuoteResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 1);

/**
 * @generated from message tzero.v1.payment.GetPayoutQuoteRequest
 */
export type GetPayoutQuoteRequest = Message<"tzero.v1.payment.GetPayoutQuoteRequest"> & {
  /**
   * ISO 4217 currency code, e.g. EUR, GBP, etc. in which the payout should be made
   *
   * @generated from field: string payout_currency = 10;
   */
  payoutCurrency: string;

  /**
   * amount in quote currency, only USD is supported
   *
   * @generated from field: tzero.v1.common.Decimal amount = 20;
   */
  amount?: Decimal;

  /**
   * type of the quote, e.g. real-time or guaranteed
   *
   * @generated from field: tzero.v1.payment.QuoteType quote_type = 30;
   */
  quoteType: QuoteType;

  /**
   * payment method to use for the payout, e.g. bank transfer, card, etc.
   *
   * @generated from field: tzero.v1.common.PaymentMethodType payout_method = 40;
   */
  payoutMethod: PaymentMethodType;
};

/**
 * Describes the message tzero.v1.payment.GetPayoutQuoteRequest.
 * Use `create(GetPayoutQuoteRequestSchema)` to create a new message.
 */
export const GetPayoutQuoteRequestSchema: GenMessage<GetPayoutQuoteRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 2);

/**
 * @generated from message tzero.v1.payment.GetPayoutQuoteResponse
 */
export type GetPayoutQuoteResponse = Message<"tzero.v1.payment.GetPayoutQuoteResponse"> & {
  /**
   * rate in USD/currency, e.g. 1.2345 for 1 USD = 1.2345 EUR
   *
   * @generated from field: tzero.v1.common.Decimal rate = 10;
   */
  rate?: Decimal;

  /**
   * expiration time of the quote
   *
   * @generated from field: google.protobuf.Timestamp expiration = 20;
   */
  expiration?: Timestamp;

  /**
   * @generated from field: tzero.v1.payment.QuoteId quote_id = 30;
   */
  quoteId?: QuoteId;
};

/**
 * Describes the message tzero.v1.payment.GetPayoutQuoteResponse.
 * Use `create(GetPayoutQuoteResponseSchema)` to create a new message.
 */
export const GetPayoutQuoteResponseSchema: GenMessage<GetPayoutQuoteResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 3);

/**
 * @generated from message tzero.v1.payment.CreatePaymentRequest
 */
export type CreatePaymentRequest = Message<"tzero.v1.payment.CreatePaymentRequest"> & {
  /**
   * unique client generated id for this payment
   *
   * @generated from field: string payment_client_id = 10;
   */
  paymentClientId: string;

  /**
   * ISO 4217 currency code, e.g. EUR, GBP, etc. in which the payout should be made
   *
   * @generated from field: string payout_currency = 20;
   */
  payoutCurrency: string;

  /**
   * payment method to use for the payout, e.g. bank transfer, card, etc.
   *
   * @generated from field: tzero.v1.common.PaymentMethod payout_details = 25;
   */
  payoutDetails?: PaymentMethod;

  /**
   * amount in the payin currency, by default USD (if the payIn currency is not specified)
   *
   * @generated from field: tzero.v1.common.Decimal amount = 30;
   */
  amount?: Decimal;

  /**
   * if not specified, USD is used
   *
   * @generated from field: optional string payin_currency = 40;
   */
  payinCurrency?: string;

  /**
   * optional or option in the oneof?
   *
   * @generated from field: tzero.v1.payment.CreatePaymentRequest.Sender sender = 50;
   */
  sender?: CreatePaymentRequest_Sender;

  /**
   * optional or option in the oneof?
   *
   * @generated from field: tzero.v1.payment.CreatePaymentRequest.Recipient recipient = 60;
   */
  recipient?: CreatePaymentRequest_Recipient;

  /**
   * optional reference for the payment, up to 140 characters
   *
   * @generated from field: optional string reference = 70 [deprecated = true];
   * @deprecated
   */
  reference?: string;

  /**
   * if specified, must be a valid quoteId that was previously returned by the GetPayoutQuote method
   *
   * @generated from field: optional tzero.v1.payment.QuoteId quote_id = 100;
   */
  quoteId?: QuoteId;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.
 * Use `create(CreatePaymentRequestSchema)` to create a new message.
 */
export const CreatePaymentRequestSchema: GenMessage<CreatePaymentRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4);

/**
 * Work in progress
 *
 * @generated from message tzero.v1.payment.CreatePaymentRequest.Sender
 */
export type CreatePaymentRequest_Sender = Message<"tzero.v1.payment.CreatePaymentRequest.Sender"> & {
  /**
   * @generated from oneof tzero.v1.payment.CreatePaymentRequest.Sender.sender
   */
  sender: {
    /**
     * @generated from field: tzero.v1.payment.CreatePaymentRequest.PrivatePerson private_person = 10;
     */
    value: CreatePaymentRequest_PrivatePerson;
    case: "privatePerson";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.Sender.
 * Use `create(CreatePaymentRequest_SenderSchema)` to create a new message.
 */
export const CreatePaymentRequest_SenderSchema: GenMessage<CreatePaymentRequest_Sender> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4, 0);

/**
 * Work in progress
 *
 * @generated from message tzero.v1.payment.CreatePaymentRequest.Recipient
 */
export type CreatePaymentRequest_Recipient = Message<"tzero.v1.payment.CreatePaymentRequest.Recipient"> & {
  /**
   * @generated from oneof tzero.v1.payment.CreatePaymentRequest.Recipient.recipient
   */
  recipient: {
    /**
     * @generated from field: tzero.v1.payment.CreatePaymentRequest.PrivatePerson private_person = 10;
     */
    value: CreatePaymentRequest_PrivatePerson;
    case: "privatePerson";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.Recipient.
 * Use `create(CreatePaymentRequest_RecipientSchema)` to create a new message.
 */
export const CreatePaymentRequest_RecipientSchema: GenMessage<CreatePaymentRequest_Recipient> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4, 1);

/**
 * Work in progress
 *
 * @generated from message tzero.v1.payment.CreatePaymentRequest.PrivatePerson
 */
export type CreatePaymentRequest_PrivatePerson = Message<"tzero.v1.payment.CreatePaymentRequest.PrivatePerson"> & {
  /**
   * @generated from field: string private_person_client_id = 10;
   */
  privatePersonClientId: string;

  /**
   * @generated from field: string first_name = 20;
   */
  firstName: string;

  /**
   * @generated from field: string last_name = 30;
   */
  lastName: string;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentRequest.PrivatePerson.
 * Use `create(CreatePaymentRequest_PrivatePersonSchema)` to create a new message.
 */
export const CreatePaymentRequest_PrivatePersonSchema: GenMessage<CreatePaymentRequest_PrivatePerson> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 4, 2);

/**
 * @generated from message tzero.v1.payment.QuoteId
 */
export type QuoteId = Message<"tzero.v1.payment.QuoteId"> & {
  /**
   * unique identifier of the quote within the specified provider
   *
   * @generated from field: int64 quote_id = 30;
   */
  quoteId: bigint;

  /**
   * provider id of the quote
   *
   * @generated from field: int32 provider_id = 40;
   */
  providerId: number;
};

/**
 * Describes the message tzero.v1.payment.QuoteId.
 * Use `create(QuoteIdSchema)` to create a new message.
 */
export const QuoteIdSchema: GenMessage<QuoteId> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 5);

/**
 * @generated from message tzero.v1.payment.CreatePaymentResponse
 */
export type CreatePaymentResponse = Message<"tzero.v1.payment.CreatePaymentResponse"> & {
  /**
   * client generated id supplied in the request
   *
   * @generated from field: string payment_client_id = 10;
   */
  paymentClientId: string;

  /**
   * @generated from oneof tzero.v1.payment.CreatePaymentResponse.result
   */
  result: {
    /**
     * *
     * Success response - means the payment was accepted, but the payout is not yet completed. This means, the network found
     * a suitable quote for the payout currency and amount, and instructed the payout provider to process the payout.
     *
     * @generated from field: tzero.v1.payment.CreatePaymentResponse.Success success = 20;
     */
    value: CreatePaymentResponse_Success;
    case: "success";
  } | {
    /**
     * *
     * Failure response - means the payment was not accepted, e.g. the network could not find a suitable quote for the
     * payout currency and amount, or the credit limit is exceeded for the available quotes.
     *
     * @generated from field: tzero.v1.payment.CreatePaymentResponse.Failure failure = 30;
     */
    value: CreatePaymentResponse_Failure;
    case: "failure";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentResponse.
 * Use `create(CreatePaymentResponseSchema)` to create a new message.
 */
export const CreatePaymentResponseSchema: GenMessage<CreatePaymentResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 6);

/**
 * @generated from message tzero.v1.payment.CreatePaymentResponse.Success
 */
export type CreatePaymentResponse_Success = Message<"tzero.v1.payment.CreatePaymentResponse.Success"> & {
  /**
   * payment id assigned by the network
   *
   * @generated from field: int64 payment_id = 10;
   */
  paymentId: bigint;
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentResponse.Success.
 * Use `create(CreatePaymentResponse_SuccessSchema)` to create a new message.
 */
export const CreatePaymentResponse_SuccessSchema: GenMessage<CreatePaymentResponse_Success> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 6, 0);

/**
 * @generated from message tzero.v1.payment.CreatePaymentResponse.Failure
 */
export type CreatePaymentResponse_Failure = Message<"tzero.v1.payment.CreatePaymentResponse.Failure"> & {
};

/**
 * Describes the message tzero.v1.payment.CreatePaymentResponse.Failure.
 * Use `create(CreatePaymentResponse_FailureSchema)` to create a new message.
 */
export const CreatePaymentResponse_FailureSchema: GenMessage<CreatePaymentResponse_Failure> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 6, 1);

/**
 * @generated from enum tzero.v1.payment.CreatePaymentResponse.Failure.Reason
 */
export enum CreatePaymentResponse_Failure_Reason {
  /**
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
}

/**
 * Describes the enum tzero.v1.payment.CreatePaymentResponse.Failure.Reason.
 */
export const CreatePaymentResponse_Failure_ReasonSchema: GenEnum<CreatePaymentResponse_Failure_Reason> = /*@__PURE__*/
  enumDesc(file_tzero_v1_payment_network, 6, 1, 0);

/**
 * @generated from message tzero.v1.payment.ConfirmPayoutRequest
 */
export type ConfirmPayoutRequest = Message<"tzero.v1.payment.ConfirmPayoutRequest"> & {
  /**
   * payment id assigned by the network, this is the same payment id that was provided in the PayoutRequest
   *
   * @generated from field: int64 payment_id = 10;
   */
  paymentId: bigint;

  /**
   * payout id assigned by the payout provider, this is the same payout id that was provided in the PayoutRequest
   *
   * @generated from field: int64 payout_id = 20;
   */
  payoutId: bigint;

  /**
   * *
   * Payment receipt might contain metadata about payment recognizable by pay-in provider.
   *
   * @generated from field: tzero.v1.common.PaymentReceipt receipt = 30;
   */
  receipt?: PaymentReceipt;
};

/**
 * Describes the message tzero.v1.payment.ConfirmPayoutRequest.
 * Use `create(ConfirmPayoutRequestSchema)` to create a new message.
 */
export const ConfirmPayoutRequestSchema: GenMessage<ConfirmPayoutRequest> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 7);

/**
 * @generated from message tzero.v1.payment.ConfirmPayoutResponse
 */
export type ConfirmPayoutResponse = Message<"tzero.v1.payment.ConfirmPayoutResponse"> & {
};

/**
 * Describes the message tzero.v1.payment.ConfirmPayoutResponse.
 * Use `create(ConfirmPayoutResponseSchema)` to create a new message.
 */
export const ConfirmPayoutResponseSchema: GenMessage<ConfirmPayoutResponse> = /*@__PURE__*/
  messageDesc(file_tzero_v1_payment_network, 8);

/**
 * @generated from enum tzero.v1.payment.QuoteType
 */
export enum QuoteType {
  /**
   * @generated from enum value: QUOTE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * real-time quote must be valid at least for 30 seconds (TBD)
   *
   * @generated from enum value: QUOTE_TYPE_REALTIME = 1;
   */
  REALTIME = 1,
}

/**
 * Describes the enum tzero.v1.payment.QuoteType.
 */
export const QuoteTypeSchema: GenEnum<QuoteType> = /*@__PURE__*/
  enumDesc(file_tzero_v1_payment_network, 0);

/**
 * *
 * This service is used by provider to interact with the Network, e.g. push quotes and initiate payments.
 *
 * All methods of this service are idempotent, meaning they are safe to retry and multiple calls with the same parameters will have no additional effect.
 *
 * @generated from service tzero.v1.payment.NetworkService
 */
export const NetworkService: GenService<{
  /**
   * *
   * Used by the provider to publish pay-in and pay-out quotes (FX rates) into the network.
   * These quotes include tiered pricing bands and an expiration timestamp.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.UpdateQuote
   */
  updateQuote: {
    methodKind: "unary";
    input: typeof UpdateQuoteRequestSchema;
    output: typeof UpdateQuoteResponseSchema;
  },
  /**
   * *
   * Request the best available quote for a payout in a specific currency, for a given amount.
   * If the payout quote exists, but the credit limit is exceeded, this quote will not be considered.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.GetPayoutQuote
   */
  getPayoutQuote: {
    methodKind: "unary";
    input: typeof GetPayoutQuoteRequestSchema;
    output: typeof GetPayoutQuoteResponseSchema;
  },
  /**
   * *
   * Submit a request to create a new payment. PayIn currency and QuoteId are the optional parameters.
   * If the payIn currency is not specified, the network will use USD as the default payIn currency, and considering
   * the amount in USD.
   * If specified, it must be a valid currency code - in this case the network will try to find the payIn quote for the
   * specified currency and considering the band from the provider initiated this request. So this is only possible, if
   * this provider already submitted the payIn quote for the specified currency using UpdateQuote rpc.
   * If the quoteID is specified, it must be a valid quoteId that was previously returned by the GetPayoutQuote method.
   * If the quoteId is not specified, the network will try to find a suitable quote for the payout currency and amount,
   * same way as GetPayoutQuote rpc.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.CreatePayment
   */
  createPayment: {
    methodKind: "unary";
    input: typeof CreatePaymentRequestSchema;
    output: typeof CreatePaymentResponseSchema;
  },
  /**
   * *
   * Inform the network that a payout has been completed. This endpoint is called by the payout
   * provider, specifying the payment ID and payout ID, which was provided when the payout request was made to this provider.
   *
   * @generated from rpc tzero.v1.payment.NetworkService.ConfirmPayout
   */
  confirmPayout: {
    methodKind: "unary";
    input: typeof ConfirmPayoutRequestSchema;
    output: typeof ConfirmPayoutResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_tzero_v1_payment_network, 0);

