// Specification Copyright (c) 2020 Joint Working Group on interVASP Messaging Standards
// https://intervasp.org/
// https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf

// Protocol Buffer Specification Copyright (c) 2020 CipherTrace, Inc. https://ciphertrace.com

// Licensed under MIT License

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// NOTE ON THE SPECIFICATION MAPPING
// This protocol buffers specification has applied the Protocol Buffers style guide
// https://developers.google.com/protocol-buffers/docs/style to the ISVM101
// specification to be consistent with other Protocol Buffers specifications and to
// avoid common pitfalls when generating language specific classes.

// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=js"
// @generated from file ivms101/v1/ivms/ivms101.proto (package ivms101, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { AddressTypeCode, LegalPersonNameTypeCode, NationalIdentifierTypeCode, NaturalPersonNameTypeCode } from "./enum_pb.js";
import { file_ivms101_v1_ivms_enum } from "./enum_pb.js";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ivms101/v1/ivms/ivms101.proto.
 */
export const file_ivms101_v1_ivms_ivms101: GenFile = /*@__PURE__*/
  fileDesc("Ch1pdm1zMTAxL3YxL2l2bXMvaXZtczEwMS5wcm90bxIHaXZtczEwMSJ5CgZQZXJzb24SMAoObmF0dXJhbF9wZXJzb24YASABKAsyFi5pdm1zMTAxLk5hdHVyYWxQZXJzb25IABIsCgxsZWdhbF9wZXJzb24YAiABKAsyFC5pdm1zMTAxLkxlZ2FsUGVyc29uSABCDwoGcGVyc29uEgW6SAIIASLwAgoNTmF0dXJhbFBlcnNvbhIwCgRuYW1lGAEgASgLMhouaXZtczEwMS5OYXR1cmFsUGVyc29uTmFtZUIGukgDyAEBEkEKFGdlb2dyYXBoaWNfYWRkcmVzc2VzGAIgAygLMhAuaXZtczEwMS5BZGRyZXNzUhFnZW9ncmFwaGljQWRkcmVzcxJAChduYXRpb25hbF9pZGVudGlmaWNhdGlvbhgDIAEoCzIfLml2bXMxMDEuTmF0aW9uYWxJZGVudGlmaWNhdGlvbhI1ChdjdXN0b21lcl9pZGVudGlmaWNhdGlvbhgEIAEoCUIUukgRcg8YMjILXiR8Xi4qXFMuKiQSPQoXZGF0ZV9hbmRfcGxhY2Vfb2ZfYmlydGgYBSABKAsyHC5pdm1zMTAxLkRhdGVBbmRQbGFjZU9mQmlydGgSMgoUY291bnRyeV9vZl9yZXNpZGVuY2UYBiABKAlCFLpIEXIPMg1eJHxeW0EtWl17Mn0kIpsCChFOYXR1cmFsUGVyc29uTmFtZRJQChBuYW1lX2lkZW50aWZpZXJzGAEgAygLMhwuaXZtczEwMS5OYXR1cmFsUGVyc29uTmFtZUlkQgi6SAWSAQIIAVIObmFtZUlkZW50aWZpZXISVgoWbG9jYWxfbmFtZV9pZGVudGlmaWVycxgCIAMoCzIhLml2bXMxMDEuTG9jYWxOYXR1cmFsUGVyc29uTmFtZUlkUhNsb2NhbE5hbWVJZGVudGlmaWVyElwKGXBob25ldGljX25hbWVfaWRlbnRpZmllcnMYAyADKAsyIS5pdm1zMTAxLkxvY2FsTmF0dXJhbFBlcnNvbk5hbWVJZFIWcGhvbmV0aWNOYW1lSWRlbnRpZmllciLCAQoTTmF0dXJhbFBlcnNvbk5hbWVJZBItChJwcmltYXJ5X2lkZW50aWZpZXIYASABKAlCEbpIDnIMEAEYZDIGLipcUy4qEjIKFHNlY29uZGFyeV9pZGVudGlmaWVyGAIgASgJQhS6SBFyDxhkMgteJHxeLipcUy4qJBJIChRuYW1lX2lkZW50aWZpZXJfdHlwZRgDIAEoDjIiLml2bXMxMDEuTmF0dXJhbFBlcnNvbk5hbWVUeXBlQ29kZUIGukgDyAEBIscBChhMb2NhbE5hdHVyYWxQZXJzb25OYW1lSWQSLQoScHJpbWFyeV9pZGVudGlmaWVyGAEgASgJQhG6SA5yDBABGGQyBi4qXFMuKhIyChRzZWNvbmRhcnlfaWRlbnRpZmllchgCIAEoCUIUukgRcg8YZDILXiR8Xi4qXFMuKiQSSAoUbmFtZV9pZGVudGlmaWVyX3R5cGUYAyABKA4yIi5pdm1zMTAxLk5hdHVyYWxQZXJzb25OYW1lVHlwZUNvZGVCBrpIA8gBASLNBQoHQWRkcmVzcxI2CgxhZGRyZXNzX3R5cGUYASABKA4yGC5pdm1zMTAxLkFkZHJlc3NUeXBlQ29kZUIGukgDyAEBEigKCmRlcGFydG1lbnQYAiABKAlCFLpIEXIPGDIyC14kfF4uKlxTLiokEiwKDnN1Yl9kZXBhcnRtZW50GAMgASgJQhS6SBFyDxhGMgteJHxeLipcUy4qJBIpCgtzdHJlZXRfbmFtZRgEIAEoCUIUukgRcg8YRjILXiR8Xi4qXFMuKiQSLQoPYnVpbGRpbmdfbnVtYmVyGAUgASgJQhS6SBFyDxgQMgteJHxeLipcUy4qJBIrCg1idWlsZGluZ19uYW1lGAYgASgJQhS6SBFyDxgjMgteJHxeLipcUy4qJBIjCgVmbG9vchgHIAEoCUIUukgRcg8YRjILXiR8Xi4qXFMuKiQSJgoIcG9zdF9ib3gYCCABKAlCFLpIEXIPGBAyC14kfF4uKlxTLiokEiIKBHJvb20YCSABKAlCFLpIEXIPGEYyC14kfF4uKlxTLiokEicKCXBvc3RfY29kZRgKIAEoCUIUukgRcg8YEDILXiR8Xi4qXFMuKiQSJwoJdG93bl9uYW1lGAsgASgJQhS6SBFyDxgjMgteJHxeLipcUy4qJBIwChJ0b3duX2xvY2F0aW9uX25hbWUYDCABKAlCFLpIEXIPGCMyC14kfF4uKlxTLiokEisKDWRpc3RyaWN0X25hbWUYDSABKAlCFLpIEXIPGCMyC14kfF4uKlxTLiokEjIKFGNvdW50cnlfc3ViX2RpdmlzaW9uGA4gASgJQhS6SBFyDxgjMgteJHxeLipcUy4qJBIxCgxhZGRyZXNzX2xpbmUYDyADKAlCG7pIGJIBFRAHIhFyDxhGMgteJHxeLipcUy4qJBIiCgdjb3VudHJ5GBAgASgJQhG6SA5yDDIKXltBLVpdezJ9JCKCAQoTRGF0ZUFuZFBsYWNlT2ZCaXJ0aBJACg1kYXRlX29mX2JpcnRoGAEgASgJQim6SCZyJDIiXihbMC05XXs0fSktKFswLTldezJ9KS0oWzAtOV17Mn0pJBIpCg5wbGFjZV9vZl9iaXJ0aBgCIAEoCUIRukgOcgwQARhGMgYuKlxTLioi+wEKFk5hdGlvbmFsSWRlbnRpZmljYXRpb24SLgoTbmF0aW9uYWxfaWRlbnRpZmllchgBIAEoCUIRukgOcgwQARgjMgYuKlxTLioSTQoYbmF0aW9uYWxfaWRlbnRpZmllcl90eXBlGAIgASgOMiMuaXZtczEwMS5OYXRpb25hbElkZW50aWZpZXJUeXBlQ29kZUIGukgDyAEBEi4KEGNvdW50cnlfb2ZfaXNzdWUYAyABKAlCFLpIEXIPMg1eJHxeW0EtWl17Mn0kEjIKFnJlZ2lzdHJhdGlvbl9hdXRob3JpdHkYBCABKAlCErpID3INMgteJHxeLipcUy4qJCKoAgoLTGVnYWxQZXJzb24SLgoEbmFtZRgBIAEoCzIYLml2bXMxMDEuTGVnYWxQZXJzb25OYW1lQga6SAPIAQESQQoUZ2VvZ3JhcGhpY19hZGRyZXNzZXMYAiADKAsyEC5pdm1zMTAxLkFkZHJlc3NSEWdlb2dyYXBoaWNBZGRyZXNzEi0KD2N1c3RvbWVyX251bWJlchgDIAEoCUIUukgRcg8YMjILXiR8Xi4qXFMuKiQSQAoXbmF0aW9uYWxfaWRlbnRpZmljYXRpb24YBCABKAsyHy5pdm1zMTAxLk5hdGlvbmFsSWRlbnRpZmljYXRpb24SNQoXY291bnRyeV9vZl9yZWdpc3RyYXRpb24YBSABKAlCFLpIEXIPMg1eJHxeW0EtWl17Mn0kIpMCCg9MZWdhbFBlcnNvbk5hbWUSTgoQbmFtZV9pZGVudGlmaWVycxgBIAMoCzIaLml2bXMxMDEuTGVnYWxQZXJzb25OYW1lSWRCCLpIBZIBAggBUg5uYW1lSWRlbnRpZmllchJUChZsb2NhbF9uYW1lX2lkZW50aWZpZXJzGAIgAygLMh8uaXZtczEwMS5Mb2NhbExlZ2FsUGVyc29uTmFtZUlkUhNsb2NhbE5hbWVJZGVudGlmaWVyEloKGXBob25ldGljX25hbWVfaWRlbnRpZmllcnMYAyADKAsyHy5pdm1zMTAxLkxvY2FsTGVnYWxQZXJzb25OYW1lSWRSFnBob25ldGljTmFtZUlkZW50aWZpZXIilgEKEUxlZ2FsUGVyc29uTmFtZUlkEiwKEWxlZ2FsX3BlcnNvbl9uYW1lGAEgASgJQhG6SA5yDBABGGQyBi4qXFMuKhJTCiFsZWdhbF9wZXJzb25fbmFtZV9pZGVudGlmaWVyX3R5cGUYAiABKA4yIC5pdm1zMTAxLkxlZ2FsUGVyc29uTmFtZVR5cGVDb2RlQga6SAPIAQEimwEKFkxvY2FsTGVnYWxQZXJzb25OYW1lSWQSLAoRbGVnYWxfcGVyc29uX25hbWUYASABKAlCEbpIDnIMEAEYZDIGLipcUy4qElMKIWxlZ2FsX3BlcnNvbl9uYW1lX2lkZW50aWZpZXJfdHlwZRgCIAEoDjIgLml2bXMxMDEuTGVnYWxQZXJzb25OYW1lVHlwZUNvZGVCBrpIA8gBAUJXCgtjb20uaXZtczEwMUIMSXZtczEwMVByb3RvUAGiAgNJWFiqAgdJdm1zMTAxygIHSXZtczEwMeICE0l2bXMxMDFcR1BCTWV0YWRhdGHqAgdJdm1zMTAxYgZwcm90bzM", [file_ivms101_v1_ivms_enum, file_buf_validate_validate]);

/**
 * @generated from message ivms101.Person
 */
export type Person = Message<"ivms101.Person"> & {
  /**
   * @generated from oneof ivms101.Person.person
   */
  person: {
    /**
     * Definition: a uniquely distinguishable individual; one single person.
     *
     * @generated from field: ivms101.NaturalPerson natural_person = 1;
     */
    value: NaturalPerson;
    case: "naturalPerson";
  } | {
    /**
     * Definition: any entity other than a natural person that can establish a
     * permanent customer relationship with an affected entity or otherwise own
     * property. This can include companies, bodies corporate, foundations, anstalt,
     * partnerships, or associations and other relevantly similar entities.
     *
     * @generated from field: ivms101.LegalPerson legal_person = 2;
     */
    value: LegalPerson;
    case: "legalPerson";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message ivms101.Person.
 * Use `create(PersonSchema)` to create a new message.
 */
export const PersonSchema: GenMessage<Person> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 0);

/**
 * Definition: refers to a uniquely distinguishable individual; one single person
 *
 * @generated from message ivms101.NaturalPerson
 */
export type NaturalPerson = Message<"ivms101.NaturalPerson"> & {
  /**
   * Definition: the distinct words used as identification for an individual.
   *
   * @generated from field: ivms101.NaturalPersonName name = 1;
   */
  name?: NaturalPersonName;

  /**
   * Definition: the particulars of a location at which a person may be communicated with.
   *
   * @generated from field: repeated ivms101.Address geographic_addresses = 2 [json_name = "geographicAddress"];
   */
  geographicAddresses: Address[];

  /**
   * Definition: a distinct identifier used by governments of countries to uniquely
   * identify a natural or legal person.
   *
   * @generated from field: ivms101.NationalIdentification national_identification = 3;
   */
  nationalIdentification?: NationalIdentification;

  /**
   * Definition: a distinct identifier that uniquely identifies the person to the
   * institution in context.
   *
   * @generated from field: string customer_identification = 4;
   */
  customerIdentification: string;

  /**
   * Definition: date and place of birth of a person.
   *
   * @generated from field: ivms101.DateAndPlaceOfBirth date_and_place_of_birth = 5;
   */
  dateAndPlaceOfBirth?: DateAndPlaceOfBirth;

  /**
   * Definition: country in which a person resides (the place of a person's home).
   * The value used for the field country must be present on the ISO-3166-1 alpha-2
   * codes or the value XX.
   *
   * @generated from field: string country_of_residence = 6;
   */
  countryOfResidence: string;
};

/**
 * Describes the message ivms101.NaturalPerson.
 * Use `create(NaturalPersonSchema)` to create a new message.
 */
export const NaturalPersonSchema: GenMessage<NaturalPerson> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 1);

/**
 * @generated from message ivms101.NaturalPersonName
 */
export type NaturalPersonName = Message<"ivms101.NaturalPersonName"> & {
  /**
   * At least one occurrence of naturalPersonNameID must have the value ‘LEGL’
   * specified in the element naturalPersonNameIdentifierType.
   * Definition: full name separated into primary and secondary identifier.
   *
   * @generated from field: repeated ivms101.NaturalPersonNameId name_identifiers = 1 [json_name = "nameIdentifier"];
   */
  nameIdentifiers: NaturalPersonNameId[];

  /**
   * Definition: full name separated into primary and secondary identifier using
   * local characters.
   *
   * @generated from field: repeated ivms101.LocalNaturalPersonNameId local_name_identifiers = 2 [json_name = "localNameIdentifier"];
   */
  localNameIdentifiers: LocalNaturalPersonNameId[];

  /**
   * Definition: Alternate representation of a name that corresponds to the manner
   * the name is pronounced.
   *
   * @generated from field: repeated ivms101.LocalNaturalPersonNameId phonetic_name_identifiers = 3 [json_name = "phoneticNameIdentifier"];
   */
  phoneticNameIdentifiers: LocalNaturalPersonNameId[];
};

/**
 * Describes the message ivms101.NaturalPersonName.
 * Use `create(NaturalPersonNameSchema)` to create a new message.
 */
export const NaturalPersonNameSchema: GenMessage<NaturalPersonName> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 2);

/**
 * @generated from message ivms101.NaturalPersonNameId
 */
export type NaturalPersonNameId = Message<"ivms101.NaturalPersonNameId"> & {
  /**
   * Definition: This may be the family name, the maiden name or the married name,
   * the main name, the surname, and in some cases, the entire name where the natural
   * person’s name cannot be divided into two parts, or where the sender is unable to
   * divide the natural person’s name into two parts.
   *
   * @generated from field: string primary_identifier = 1;
   */
  primaryIdentifier: string;

  /**
   * Definition: These may be the forenames, familiar names, given names, initials,
   * prefixes, suffixes or Roman numerals (where considered to be legally part of the
   * name) or any other secondary names.
   *
   * @generated from field: string secondary_identifier = 2;
   */
  secondaryIdentifier: string;

  /**
   * Definition: The nature of the name specified.
   *
   * @generated from field: ivms101.NaturalPersonNameTypeCode name_identifier_type = 3;
   */
  nameIdentifierType: NaturalPersonNameTypeCode;
};

/**
 * Describes the message ivms101.NaturalPersonNameId.
 * Use `create(NaturalPersonNameIdSchema)` to create a new message.
 */
export const NaturalPersonNameIdSchema: GenMessage<NaturalPersonNameId> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 3);

/**
 * @generated from message ivms101.LocalNaturalPersonNameId
 */
export type LocalNaturalPersonNameId = Message<"ivms101.LocalNaturalPersonNameId"> & {
  /**
   * Definition: This may be the family name, the maiden name or the married name,
   * the main name, the surname, and in some cases, the entire name where the natural
   * person’s name cannot be divided into two parts, or where the sender is unable to
   * divide the natural person’s name into two parts.
   *
   * @generated from field: string primary_identifier = 1;
   */
  primaryIdentifier: string;

  /**
   * Definition: These may be the forenames, familiar names, given names, initials,
   * prefixes, suffixes or Roman numerals (where considered to be legally part of
   * the name) or any other secondary names.
   *
   * @generated from field: string secondary_identifier = 2;
   */
  secondaryIdentifier: string;

  /**
   * Definition: The nature of the name specified.
   *
   * @generated from field: ivms101.NaturalPersonNameTypeCode name_identifier_type = 3;
   */
  nameIdentifierType: NaturalPersonNameTypeCode;
};

/**
 * Describes the message ivms101.LocalNaturalPersonNameId.
 * Use `create(LocalNaturalPersonNameIdSchema)` to create a new message.
 */
export const LocalNaturalPersonNameIdSchema: GenMessage<LocalNaturalPersonNameId> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 4);

/**
 * Constraint: ValidAddress
 * There must be at least one occurrence of the element addressLine or (streetName and
 * buildingName and/or buildingNumber).
 *
 * @generated from message ivms101.Address
 */
export type Address = Message<"ivms101.Address"> & {
  /**
   * Definition: Identifies the nature of the address.
   *
   * @generated from field: ivms101.AddressTypeCode address_type = 1;
   */
  addressType: AddressTypeCode;

  /**
   * Definition: Identification of a division of a large organisation or building.
   *
   * @generated from field: string department = 2;
   */
  department: string;

  /**
   * Definition: Identification of a sub-division of a large organisation or building.
   *
   * @generated from field: string sub_department = 3;
   */
  subDepartment: string;

  /**
   * Definition: Name of a street or thoroughfare.
   *
   * @generated from field: string street_name = 4;
   */
  streetName: string;

  /**
   * Definition: Number that identifies the position of a building on a street.
   *
   * @generated from field: string building_number = 5;
   */
  buildingNumber: string;

  /**
   * Definition: Name of the building or house.
   *
   * @generated from field: string building_name = 6;
   */
  buildingName: string;

  /**
   * Definition: Floor or storey within a building.
   *
   * @generated from field: string floor = 7;
   */
  floor: string;

  /**
   * Definition: Numbered box in a post office, assigned to a person or organisation,
   * where letters are kept until called for.
   *
   * @generated from field: string post_box = 8;
   */
  postBox: string;

  /**
   * Definition: Building room number.
   *
   * @generated from field: string room = 9;
   */
  room: string;

  /**
   * Definition: Identifier consisting of a group of letters and/or numbers that is
   * added to a postal address to assist the sorting of mail.
   *
   * @generated from field: string post_code = 10;
   */
  postCode: string;

  /**
   * Definition: Name of a built-up area, with defined boundaries and a local government.
   *
   * @generated from field: string town_name = 11;
   */
  townName: string;

  /**
   * Definition: Specific location name within the town.
   *
   * @generated from field: string town_location_name = 12;
   */
  townLocationName: string;

  /**
   * Definition: Identifies a subdivision within a country subdivision.
   *
   * @generated from field: string district_name = 13;
   */
  districtName: string;

  /**
   * Definition: Identifies a subdivision of a country for example, state, region,
   * province, départment or county.
   *
   * @generated from field: string country_sub_division = 14;
   */
  countrySubDivision: string;

  /**
   * Definition: Information that locates and identifies a specific address, as
   * defined by postal services, presented in free format text.
   *
   * @generated from field: repeated string address_line = 15;
   */
  addressLine: string[];

  /**
   * Constraint: The value used for the field country must be present on the
   * ISO-3166-1 alpha-2 codes or the value XX.
   *
   * @generated from field: string country = 16;
   */
  country: string;
};

/**
 * Describes the message ivms101.Address.
 * Use `create(AddressSchema)` to create a new message.
 */
export const AddressSchema: GenMessage<Address> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 5);

/**
 * Constraint: DateInPast
 * If dateOfBirth is specified, the date specified must be a historic date (i.e. a date
 * prior to the current date)
 *
 * @generated from message ivms101.DateAndPlaceOfBirth
 */
export type DateAndPlaceOfBirth = Message<"ivms101.DateAndPlaceOfBirth"> & {
  /**
   * Definition: Date on which a person is born.
   * Definition: A point in time, represented as a day within the calendar year.
   * Compliant with ISO 8601.
   * Format: YYYY-MM-DD
   *
   * @generated from field: string date_of_birth = 1;
   */
  dateOfBirth: string;

  /**
   * Definition: The town and/or the city and/or the suburb and/or the country
   * subdivision and/or the country where the person was born.
   *
   * @generated from field: string place_of_birth = 2;
   */
  placeOfBirth: string;
};

/**
 * Describes the message ivms101.DateAndPlaceOfBirth.
 * Use `create(DateAndPlaceOfBirthSchema)` to create a new message.
 */
export const DateAndPlaceOfBirthSchema: GenMessage<DateAndPlaceOfBirth> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 6);

/**
 * Constraint: ValidNationalIdentifierLegalPerson
 * A legal person must have a value for nationalIdentifierType of either ‘RAID’ or
 * ‘MISC’ or ‘LEIX’ or ‘TXID’.
 * Constraint: CompleteNationalIdentifierLegalPerson
 * A LegalPerson must not have a value for countryOfIssue and must have a value for the
 * element RegistrationAuthority if the value for nationalIdentifierType is not ‘LEIX’
 * Constraint: ValidLEI
 * A LegalPerson with a nationalIdentifierType of ‘LEIX’ must have a value for the
 * element nationalIdentifier that adheres to the convention as stated in datatype
 * ‘LEIText’.
 *
 * @generated from message ivms101.NationalIdentification
 */
export type NationalIdentification = Message<"ivms101.NationalIdentification"> & {
  /**
   * Definition: An identifier issued by an appropriate issuing authority.
   * Constraint: ValidLEI
   *
   * @generated from field: string national_identifier = 1;
   */
  nationalIdentifier: string;

  /**
   * Definition: Specifies the type of identifier specified.
   *
   * @generated from field: ivms101.NationalIdentifierTypeCode national_identifier_type = 2;
   */
  nationalIdentifierType: NationalIdentifierTypeCode;

  /**
   * Definition: Country of the issuing authority.
   *
   * @generated from field: string country_of_issue = 3;
   */
  countryOfIssue: string;

  /**
   * Definition: A code specifying the registration authority.
   * Constraint: The value used for the applicable element must be present on the
   * GLEIF Registration Authorities List.
   *
   * @generated from field: string registration_authority = 4;
   */
  registrationAuthority: string;
};

/**
 * Describes the message ivms101.NationalIdentification.
 * Use `create(NationalIdentificationSchema)` to create a new message.
 */
export const NationalIdentificationSchema: GenMessage<NationalIdentification> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 7);

/**
 * Definition: refers to any entity other than a natural person that can establish a
 * permanent customer relationship with an affected entity or otherwise own property.
 * This can include companies, bodies corporate, foundations, anstalt, partnerships, or
 * associations and other relevantly similar entities.
 * Constraint: OriginatorInformationLegalPerson
 * If the originator is a LegalPerson either geographicAddress (with an addressType
 * value of ‘GEOG’) and/or nationalIdentification and/or customerNumber is required.
 *
 * @generated from message ivms101.LegalPerson
 */
export type LegalPerson = Message<"ivms101.LegalPerson"> & {
  /**
   * Definition: The name of the legal person.
   * Constraint: LegalNamePresentLegalPerson
   * At least one occurrence of legalPersonNameIdentifier must have the value ‘LEGL’
   * specified in the element legalPersonNameIdentifierType.
   *
   * @generated from field: ivms101.LegalPersonName name = 1;
   */
  name?: LegalPersonName;

  /**
   * Definition: The address of the legal person.
   *
   * @generated from field: repeated ivms101.Address geographic_addresses = 2 [json_name = "geographicAddress"];
   */
  geographicAddresses: Address[];

  /**
   * Definition: The unique identification number applied by the VASP to customer.
   * NOTE The specification has a descrepency in that 5.2.9.3.3 specifies an element
   * name as "customerNumber", while the table in 5.2.9.1 calls that element
   * "customerIdentification"
   *
   * @generated from field: string customer_number = 3;
   */
  customerNumber: string;

  /**
   * Definition: A distinct identifier used by governments of countries to uniquely
   * identify a natural or legal person.
   *
   * @generated from field: ivms101.NationalIdentification national_identification = 4;
   */
  nationalIdentification?: NationalIdentification;

  /**
   * Definition: The country in which the legal person is registered.
   * Constraint: The value used for the field country must be present on the
   * ISO-3166-1 alpha-2 codes or the value XX.
   *
   * @generated from field: string country_of_registration = 5;
   */
  countryOfRegistration: string;
};

/**
 * Describes the message ivms101.LegalPerson.
 * Use `create(LegalPersonSchema)` to create a new message.
 */
export const LegalPersonSchema: GenMessage<LegalPerson> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 8);

/**
 * @generated from message ivms101.LegalPersonName
 */
export type LegalPersonName = Message<"ivms101.LegalPersonName"> & {
  /**
   * Definition: The name and type of name by which the legal person is known.
   * Constraint: LegalNamePresent
   * At least one occurrence of legalPersonNameIdentifier must have the value
   * ‘LEGL’ specified in the element legalPersonNameIdentifierType.
   *
   * @generated from field: repeated ivms101.LegalPersonNameId name_identifiers = 1 [json_name = "nameIdentifier"];
   */
  nameIdentifiers: LegalPersonNameId[];

  /**
   * Definition: The name and type of name by which the legal person is known using
   * local characters.
   *
   * @generated from field: repeated ivms101.LocalLegalPersonNameId local_name_identifiers = 2 [json_name = "localNameIdentifier"];
   */
  localNameIdentifiers: LocalLegalPersonNameId[];

  /**
   * Definition: The name and type of name by which the legal person is known using
   * local characters.
   *
   * @generated from field: repeated ivms101.LocalLegalPersonNameId phonetic_name_identifiers = 3 [json_name = "phoneticNameIdentifier"];
   */
  phoneticNameIdentifiers: LocalLegalPersonNameId[];
};

/**
 * Describes the message ivms101.LegalPersonName.
 * Use `create(LegalPersonNameSchema)` to create a new message.
 */
export const LegalPersonNameSchema: GenMessage<LegalPersonName> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 9);

/**
 * @generated from message ivms101.LegalPersonNameId
 */
export type LegalPersonNameId = Message<"ivms101.LegalPersonNameId"> & {
  /**
   * Definition: Name by which the legal person is known.
   *
   * @generated from field: string legal_person_name = 1;
   */
  legalPersonName: string;

  /**
   * Definition: The nature of the name specified.
   *
   * @generated from field: ivms101.LegalPersonNameTypeCode legal_person_name_identifier_type = 2;
   */
  legalPersonNameIdentifierType: LegalPersonNameTypeCode;
};

/**
 * Describes the message ivms101.LegalPersonNameId.
 * Use `create(LegalPersonNameIdSchema)` to create a new message.
 */
export const LegalPersonNameIdSchema: GenMessage<LegalPersonNameId> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 10);

/**
 * @generated from message ivms101.LocalLegalPersonNameId
 */
export type LocalLegalPersonNameId = Message<"ivms101.LocalLegalPersonNameId"> & {
  /**
   * Definition: Name by which the legal person is known.
   *
   * @generated from field: string legal_person_name = 1;
   */
  legalPersonName: string;

  /**
   * Definition: The nature of the name specified.
   *
   * @generated from field: ivms101.LegalPersonNameTypeCode legal_person_name_identifier_type = 2;
   */
  legalPersonNameIdentifierType: LegalPersonNameTypeCode;
};

/**
 * Describes the message ivms101.LocalLegalPersonNameId.
 * Use `create(LocalLegalPersonNameIdSchema)` to create a new message.
 */
export const LocalLegalPersonNameIdSchema: GenMessage<LocalLegalPersonNameId> = /*@__PURE__*/
  messageDesc(file_ivms101_v1_ivms_ivms101, 11);

