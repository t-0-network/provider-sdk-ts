// Specification Copyright (c) 2020 Joint Working Group on interVASP Messaging Standards
// https://intervasp.org/
// https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf

// Protocol Buffer Specification Copyright (c) 2020 CipherTrace, Inc. https://ciphertrace.com

// Licensed under MIT License

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// NOTE ON THE SPECIFICATION MAPPING
// This protocol buffers specification has applied the Protocol Buffers style guide
// https://developers.google.com/protocol-buffers/docs/style to the ISVM101
// specification to be consistent with other Protocol Buffers specifications and to
// avoid common pitfalls when generating language specific classes.

// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=js"
// @generated from file ivms101/v1/ivms/enum.proto (package ivms101, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc } from "@bufbuild/protobuf/codegenv2";

/**
 * Describes the file ivms101/v1/ivms/enum.proto.
 */
export const file_ivms101_v1_ivms_enum: GenFile = /*@__PURE__*/
  fileDesc("Chppdm1zMTAxL3YxL2l2bXMvZW51bS5wcm90bxIHaXZtczEwMSrjAQoZTmF0dXJhbFBlcnNvbk5hbWVUeXBlQ29kZRImCiJOQVRVUkFMX1BFUlNPTl9OQU1FX1RZUEVfQ09ERV9NSVNDEAASJgoiTkFUVVJBTF9QRVJTT05fTkFNRV9UWVBFX0NPREVfQUxJQRABEiYKIk5BVFVSQUxfUEVSU09OX05BTUVfVFlQRV9DT0RFX0JJUlQQAhImCiJOQVRVUkFMX1BFUlNPTl9OQU1FX1RZUEVfQ09ERV9NQUlEEAMSJgoiTkFUVVJBTF9QRVJTT05fTkFNRV9UWVBFX0NPREVfTEVHTBAEKrEBChdMZWdhbFBlcnNvbk5hbWVUeXBlQ29kZRIkCiBMRUdBTF9QRVJTT05fTkFNRV9UWVBFX0NPREVfTUlTQxAAEiQKIExFR0FMX1BFUlNPTl9OQU1FX1RZUEVfQ09ERV9MRUdMEAESJAogTEVHQUxfUEVSU09OX05BTUVfVFlQRV9DT0RFX1NIUlQQAhIkCiBMRUdBTF9QRVJTT05fTkFNRV9UWVBFX0NPREVfVFJBRBADKoEBCg9BZGRyZXNzVHlwZUNvZGUSGgoWQUREUkVTU19UWVBFX0NPREVfTUlTQxAAEhoKFkFERFJFU1NfVFlQRV9DT0RFX0hPTUUQARIaChZBRERSRVNTX1RZUEVfQ09ERV9CSVpaEAISGgoWQUREUkVTU19UWVBFX0NPREVfR0VPRxADKqwDChpOYXRpb25hbElkZW50aWZpZXJUeXBlQ29kZRImCiJOQVRJT05BTF9JREVOVElGSUVSX1RZUEVfQ09ERV9NSVNDEAASJgoiTkFUSU9OQUxfSURFTlRJRklFUl9UWVBFX0NPREVfQVJOVRABEiYKIk5BVElPTkFMX0lERU5USUZJRVJfVFlQRV9DT0RFX0NDUFQQAhImCiJOQVRJT05BTF9JREVOVElGSUVSX1RZUEVfQ09ERV9SQUlEEAMSJgoiTkFUSU9OQUxfSURFTlRJRklFUl9UWVBFX0NPREVfRFJMQxAEEiYKIk5BVElPTkFMX0lERU5USUZJRVJfVFlQRV9DT0RFX0ZJSU4QBRImCiJOQVRJT05BTF9JREVOVElGSUVSX1RZUEVfQ09ERV9UWElEEAYSJgoiTkFUSU9OQUxfSURFTlRJRklFUl9UWVBFX0NPREVfU09DUxAHEiYKIk5BVElPTkFMX0lERU5USUZJRVJfVFlQRV9DT0RFX0lEQ0QQCBImCiJOQVRJT05BTF9JREVOVElGSUVSX1RZUEVfQ09ERV9MRUlYEAkqiQQKGVRyYW5zbGl0ZXJhdGlvbk1ldGhvZENvZGUSJAogVFJBTlNMSVRFUkFUSU9OX01FVEhPRF9DT0RFX09USFIQABIkCiBUUkFOU0xJVEVSQVRJT05fTUVUSE9EX0NPREVfQVJBQhABEiQKIFRSQU5TTElURVJBVElPTl9NRVRIT0RfQ09ERV9BUkFOEAISJAogVFJBTlNMSVRFUkFUSU9OX01FVEhPRF9DT0RFX0FSTU4QAxIkCiBUUkFOU0xJVEVSQVRJT05fTUVUSE9EX0NPREVfQ1lSTBAEEiQKIFRSQU5TTElURVJBVElPTl9NRVRIT0RfQ09ERV9ERVZBEAUSJAogVFJBTlNMSVRFUkFUSU9OX01FVEhPRF9DT0RFX0dFT1IQBhIkCiBUUkFOU0xJVEVSQVRJT05fTUVUSE9EX0NPREVfR1JFSxAHEiQKIFRSQU5TTElURVJBVElPTl9NRVRIT0RfQ09ERV9IQU5JEAgSJAogVFJBTlNMSVRFUkFUSU9OX01FVEhPRF9DT0RFX0hFQlIQCRIkCiBUUkFOU0xJVEVSQVRJT05fTUVUSE9EX0NPREVfS0FOQRAKEiQKIFRSQU5TTElURVJBVElPTl9NRVRIT0RfQ09ERV9LT1JFEAsSJAogVFJBTlNMSVRFUkFUSU9OX01FVEhPRF9DT0RFX1RIQUkQDEJUCgtjb20uaXZtczEwMUIJRW51bVByb3RvUAGiAgNJWFiqAgdJdm1zMTAxygIHSXZtczEwMeICE0l2bXMxMDFcR1BCTWV0YWRhdGHqAgdJdm1zMTAxYgZwcm90bzM");

/**
 * Definition: A single value corresponding to the nature of name being adopted.
 *
 * @generated from enum ivms101.NaturalPersonNameTypeCode
 */
export enum NaturalPersonNameTypeCode {
  /**
   * Unspecified
   * A name by which a natural person may be known but which cannot otherwise be
   * categorized or the category of which the sender is unable to determine.
   *
   * @generated from enum value: NATURAL_PERSON_NAME_TYPE_CODE_MISC = 0;
   */
  MISC = 0,

  /**
   * Alias name
   * A name other than the legal name by which a natural person is also known.
   *
   * @generated from enum value: NATURAL_PERSON_NAME_TYPE_CODE_ALIA = 1;
   */
  ALIA = 1,

  /**
   * Name at birth
   * The name given to a natural person at birth.
   *
   * @generated from enum value: NATURAL_PERSON_NAME_TYPE_CODE_BIRT = 2;
   */
  BIRT = 2,

  /**
   * Maiden name
   * The original name of a natural person who has changed their name after marriage.
   *
   * @generated from enum value: NATURAL_PERSON_NAME_TYPE_CODE_MAID = 3;
   */
  MAID = 3,

  /**
   * Legal name
   * Identifies a natural person for legal, official or administrative purposes.
   *
   * @generated from enum value: NATURAL_PERSON_NAME_TYPE_CODE_LEGL = 4;
   */
  LEGL = 4,
}

/**
 * Describes the enum ivms101.NaturalPersonNameTypeCode.
 */
export const NaturalPersonNameTypeCodeSchema: GenEnum<NaturalPersonNameTypeCode> = /*@__PURE__*/
  enumDesc(file_ivms101_v1_ivms_enum, 0);

/**
 *  Definition: A single value corresponding to the nature of name being specified
 * for the legal person.
 *
 * @generated from enum ivms101.LegalPersonNameTypeCode
 */
export enum LegalPersonNameTypeCode {
  /**
   * Unspecified
   * A name by which a legal person may be known but which cannot otherwise be
   * categorized or the category of which the sender is unable to determine.
   * Not an official part of the IVMS 101 Standard
   *
   * @generated from enum value: LEGAL_PERSON_NAME_TYPE_CODE_MISC = 0;
   */
  MISC = 0,

  /**
   * Legal name
   * Official name under which an organisation is registered.
   *
   * @generated from enum value: LEGAL_PERSON_NAME_TYPE_CODE_LEGL = 1;
   */
  LEGL = 1,

  /**
   * Short name
   * Specifies the short name of the organisation.
   *
   * @generated from enum value: LEGAL_PERSON_NAME_TYPE_CODE_SHRT = 2;
   */
  SHRT = 2,

  /**
   * Trading name
   * Name used by a business for commercial purposes, although its registered legal
   * name, used for contracts and other formal situations, may be another.
   *
   * @generated from enum value: LEGAL_PERSON_NAME_TYPE_CODE_TRAD = 3;
   */
  TRAD = 3,
}

/**
 * Describes the enum ivms101.LegalPersonNameTypeCode.
 */
export const LegalPersonNameTypeCodeSchema: GenEnum<LegalPersonNameTypeCode> = /*@__PURE__*/
  enumDesc(file_ivms101_v1_ivms_enum, 1);

/**
 * Definition: Identifies the nature of the address.
 *
 * @generated from enum ivms101.AddressTypeCode
 */
export enum AddressTypeCode {
  /**
   * Unspecified
   * An address the category of which the sender is unable to determine.
   * Use GEOG instead of this code in general use.
   * Not an official part of the IVMS 101 Standard
   *
   * @generated from enum value: ADDRESS_TYPE_CODE_MISC = 0;
   */
  MISC = 0,

  /**
   * Residential
   * Address is the home address.
   *
   * @generated from enum value: ADDRESS_TYPE_CODE_HOME = 1;
   */
  HOME = 1,

  /**
   * Business
   * Address is the business address.
   *
   * @generated from enum value: ADDRESS_TYPE_CODE_BIZZ = 2;
   */
  BIZZ = 2,

  /**
   * Geographic
   * Address is the unspecified physical (geographical) address suitable for
   * identification of the natural or legal person.
   *
   * @generated from enum value: ADDRESS_TYPE_CODE_GEOG = 3;
   */
  GEOG = 3,
}

/**
 * Describes the enum ivms101.AddressTypeCode.
 */
export const AddressTypeCodeSchema: GenEnum<AddressTypeCode> = /*@__PURE__*/
  enumDesc(file_ivms101_v1_ivms_enum, 2);

/**
 * Definition: Identifies the national identification type.
 * NationalIdentifierTypeCode applies a restriction over the codes present in ISO20022
 * datatype ‘TypeOfIdentification4Code’.
 *
 * @generated from enum ivms101.NationalIdentifierTypeCode
 */
export enum NationalIdentifierTypeCode {
  /**
   * Unspecified
   * A national identifier which may be known but which cannot otherwise be
   * categorized or the category of which the sender is unable to determine.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_MISC = 0;
   */
  MISC = 0,

  /**
   * Alien registration number
   * Number assigned by a government agency to identify foreign nationals.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_ARNU = 1;
   */
  ARNU = 1,

  /**
   * Passport number
   * Number assigned by a passport authority.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_CCPT = 2;
   */
  CCPT = 2,

  /**
   * Registration authority identifier
   * Identifier of a legal entity as maintained by a registration authority.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_RAID = 3;
   */
  RAID = 3,

  /**
   * Driver license number
   * Number assigned to a driver's license.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_DRLC = 4;
   */
  DRLC = 4,

  /**
   * Foreign investment identity number
   * Number assigned to a foreign investor (other than the alien number).
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_FIIN = 5;
   */
  FIIN = 5,

  /**
   * Tax identification number
   * Number assigned by a tax authority to an entity.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_TXID = 6;
   */
  TXID = 6,

  /**
   * Social security number
   * Number assigned by a social security agency.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_SOCS = 7;
   */
  SOCS = 7,

  /**
   * Identity card number
   * Number assigned by a national authority to an identity card.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_IDCD = 8;
   */
  IDCD = 8,

  /**
   * Legal Entity Identifier
   * Legal Entity Identifier (LEI) assigned in accordance with ISO 17442.
   * The LEI is a 20-character, alpha-numeric code that enables clear and unique
   * identification of legal entities participating in financial transactions.
   *
   * @generated from enum value: NATIONAL_IDENTIFIER_TYPE_CODE_LEIX = 9;
   */
  LEIX = 9,
}

/**
 * Describes the enum ivms101.NationalIdentifierTypeCode.
 */
export const NationalIdentifierTypeCodeSchema: GenEnum<NationalIdentifierTypeCode> = /*@__PURE__*/
  enumDesc(file_ivms101_v1_ivms_enum, 3);

/**
 * Definition: Identifies the national script from which transliteration to Latin
 * script is applied.
 *
 * @generated from enum ivms101.TransliterationMethodCode
 */
export enum TransliterationMethodCode {
  /**
   * Script other than those listed below
   * Unspecified Standard
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_OTHR = 0;
   */
  OTHR = 0,

  /**
   * Arabic (Arabic language)
   * ISO 233-2:1993
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_ARAB = 1;
   */
  ARAB = 1,

  /**
   * Arabic (Persian language)
   * ISO 233-3:1999
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_ARAN = 2;
   */
  ARAN = 2,

  /**
   * Armenian
   * ISO 9985:1996
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_ARMN = 3;
   */
  ARMN = 3,

  /**
   * Cyrillic
   * ISO 9:1995
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_CYRL = 4;
   */
  CYRL = 4,

  /**
   * Devanagari & related Indic
   * ISO 15919:2001
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_DEVA = 5;
   */
  DEVA = 5,

  /**
   * Georgian
   * ISO 9984:1996
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_GEOR = 6;
   */
  GEOR = 6,

  /**
   * Greek
   * ISO 843:1997
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_GREK = 7;
   */
  GREK = 7,

  /**
   * Han (Hanzi, Kanji, Hanja)
   * ISO 7098:2015
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_HANI = 8;
   */
  HANI = 8,

  /**
   * Hebrew
   * ISO 259-2:1994
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_HEBR = 9;
   */
  HEBR = 9,

  /**
   * Kana
   * ISO 3602:1989
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_KANA = 10;
   */
  KANA = 10,

  /**
   * Korean
   * Revised Romanization of Korean
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_KORE = 11;
   */
  KORE = 11,

  /**
   * Thai
   * ISO 11940-2:2007
   *
   * @generated from enum value: TRANSLITERATION_METHOD_CODE_THAI = 12;
   */
  THAI = 12,
}

/**
 * Describes the enum ivms101.TransliterationMethodCode.
 */
export const TransliterationMethodCodeSchema: GenEnum<TransliterationMethodCode> = /*@__PURE__*/
  enumDesc(file_ivms101_v1_ivms_enum, 4);

